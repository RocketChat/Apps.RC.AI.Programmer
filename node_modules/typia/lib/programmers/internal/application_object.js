"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.application_object = void 0;
var CommentFactory_1 = require("../../factories/CommentFactory");
var Metadata_1 = require("../../schemas/metadata/Metadata");
var PatternUtil_1 = require("../../utils/PatternUtil");
var JSON_SCHEMA_PREFIX_1 = require("./JSON_SCHEMA_PREFIX");
var application_schema_1 = require("./application_schema");
var metadata_to_pattern_1 = require("./metadata_to_pattern");
/**
 * @internal
 */
var application_object = function (options) {
    return function (components) {
        return function (obj) {
            return function (nullable) {
                var _a, _b;
                if (obj._Is_literal() === true)
                    return create_object_schema(options)(components)(obj)(nullable);
                var key = options.purpose === "ajv"
                    ? obj.name
                    : "".concat(obj.name).concat(nullable ? ".Nullable" : "");
                var $ref = "".concat(JSON_SCHEMA_PREFIX_1.JSON_COMPONENTS_PREFIX, "/schemas/").concat(key);
                if (((_a = components.schemas) === null || _a === void 0 ? void 0 : _a[key]) !== undefined)
                    return { $ref: $ref };
                var object = {
                    $id: options.purpose === "ajv" ? $ref : undefined,
                };
                (_b = components.schemas) !== null && _b !== void 0 ? _b : (components.schemas = {});
                components.schemas[key] = object;
                Object.assign(object, create_object_schema(options)(components)(obj)(nullable));
                return { $ref: $ref };
            };
        };
    };
};
exports.application_object = application_object;
var create_object_schema = function (options) {
    return function (components) {
        return function (obj) {
            return function (nullable) {
                var e_1, _a;
                var _b, _c, _d;
                // ITERATE PROPERTIES
                var properties = {};
                var extraMeta = {
                    patternProperties: {},
                    additionalProperties: undefined,
                };
                var required = [];
                var _loop_1 = function (property) {
                    if (
                    // FUNCTIONAL TYPE
                    property.value.functional === true &&
                        property.value.nullable === false &&
                        property.value.isRequired() === true &&
                        property.value.size() === 0)
                        return "continue";
                    else if (property.jsDocTags.find(function (tag) { return tag.name === "hidden"; }))
                        return "continue"; // THE HIDDEN TAG
                    var key = property.key.getSoleLiteral();
                    var schema = (0, application_schema_1.application_schema)(options)(true)(components)(property.value)(__assign(__assign({ deprecated: property.jsDocTags.some(function (tag) { return tag.name === "deprecated"; }) ||
                            undefined, title: (function () {
                            var _a;
                            var info = property.jsDocTags.find(function (tag) { return tag.name === "title"; });
                            return ((_a = info === null || info === void 0 ? void 0 : info.text) === null || _a === void 0 ? void 0 : _a.length)
                                ? CommentFactory_1.CommentFactory.merge(info.text)
                                : undefined;
                        })(), description: (_b = property.description) !== null && _b !== void 0 ? _b : undefined }, (options.surplus
                        ? {
                            "x-typia-required": property.value.required,
                            "x-typia-optional": property.value.optional,
                        }
                        : {})), { "x-typia-jsDocTags": (function () {
                            var filtered = property.jsDocTags.filter(function (tag) {
                                return tag.name !== "title" &&
                                    tag.name !== "deprecated" &&
                                    tag.name !== "hidden";
                            });
                            return filtered.length ? filtered : undefined;
                        })() }));
                    if (schema === null)
                        return "continue";
                    if (options.surplus === false && ((_c = schema["x-typia-jsDocTags"]) === null || _c === void 0 ? void 0 : _c.length))
                        delete schema["x-typia-jsDocTags"];
                    if (key !== null) {
                        properties[key] = schema;
                        if (property.value.isRequired() === true)
                            required.push(key);
                    }
                    else {
                        var pattern = (0, metadata_to_pattern_1.metadata_to_pattern)(true)(property.key);
                        if (pattern === PatternUtil_1.PatternUtil.STRING)
                            extraMeta.additionalProperties = [property.value, schema];
                        else
                            extraMeta.patternProperties[pattern] = [property.value, schema];
                    }
                };
                try {
                    for (var _e = __values(obj.properties), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var property = _f.value;
                        _loop_1(property);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                var extraProps = {
                    additionalProperties: (_d = extraMeta.additionalProperties) === null || _d === void 0 ? void 0 : _d[1],
                    patternProperties: (function () {
                        var e_2, _a;
                        if (Object.keys(extraMeta.patternProperties).length === 0)
                            return undefined;
                        var output = {};
                        try {
                            for (var _b = __values(Object.entries(extraMeta.patternProperties)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                                output[key] = value[1];
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        return output;
                    })(),
                };
                return __assign(__assign({ 
                    // $recursiveAnchor:
                    //     (options.purpose === "ajv" && obj.recursive) || undefined,
                    type: "object", properties: properties, nullable: options.purpose === "swagger" ? nullable : undefined, required: required.length ? required : undefined, description: obj.description }, (options.surplus ? { "x-typia-jsDocTags": obj.jsDocTags } : {})), (options.purpose === "ajv"
                    ? extraProps
                    : options.surplus
                        ? {
                            // swagger can't express patternProperties
                            "x-typia-additionalProperties": extraProps.additionalProperties,
                            "x-typia-patternProperties": extraProps.patternProperties,
                            additionalProperties: join(options)(components)(extraMeta),
                        }
                        : {}));
            };
        };
    };
};
var join = function (options) {
    return function (components) {
        return function (extra) {
            var _a;
            // LIST UP METADATA
            var elements = Object.values(extra.patternProperties || {});
            if (extra.additionalProperties)
                elements.push(extra.additionalProperties);
            // SHORT RETURN
            if (elements.length === 0)
                return undefined;
            else if (elements.length === 1)
                return elements[0][1];
            // MERGE METADATA AND GENERATE VULNERABLE SCHEMA
            var meta = elements
                .map(function (tuple) { return tuple[0]; })
                .reduce(function (x, y) { return Metadata_1.Metadata.merge(x, y); });
            return ((_a = (0, application_schema_1.application_schema)(options)(true)(components)(meta)(options.surplus
                ? {
                    "x-typia-required": false,
                }
                : {})) !== null && _a !== void 0 ? _a : undefined);
        };
    };
};
//# sourceMappingURL=application_object.js.map