{"version":3,"sources":["src/client/AppsEngineUIHost.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2CAAyC;AAEzC,6CAAmD;AAInD;;GAEG;AACH,MAAsB,gBAAgB;IAMlC;QACI,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAED;;OAEG;IACI,UAAU;QACb,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAO,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE;YAC1D,IAAI,CAAC,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,cAAc,CAAC,sBAAU,CAAC,CAAA,EAAE;gBACnC,OAAO;aACV;YAED,IAAI,CAAC,mBAAmB,GAAG,MAAgB,CAAC;YAE5C,MAAM,EACF,CAAC,sBAAU,CAAC,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,GAC/B,GAAG,IAAI,CAAC;YAET,QAAQ,MAAM,EAAE;gBACZ,KAAK,gCAAmB,CAAC,aAAa;oBAClC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,EAAE,EAAE,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;oBAC9D,MAAM;gBACV,KAAK,gCAAmB,CAAC,aAAa;oBAClC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,EAAE,EAAE,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;oBAC9D,MAAM;aACb;QACL,CAAC,CAAA,CAAC,CAAC;IACP,CAAC;IAYD;;;;;OAKG;IACW,YAAY,CAAC,MAA2B,EAAE,EAAU,EAAE,IAAsB;;YACtF,IAAI,IAAI,CAAC,mBAAmB,YAAY,WAAW,IAAI,IAAI,CAAC,mBAAmB,YAAY,aAAa,EAAE;gBACtG,OAAO;aACV;YAED,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAChC;gBACI,CAAC,sBAAU,CAAC,EAAE;oBACV,EAAE;oBACF,MAAM;oBACN,OAAO,EAAE,IAAI;iBACS;aAC7B,EACD,GAAG,CACN,CAAC;QACN,CAAC;KAAA;CACJ;AApED,4CAoEC","file":"AppsEngineUIHost.js","sourcesContent":["import { MESSAGE_ID } from './constants';\nimport type { IAppsEngineUIResponse, IExternalComponentRoomInfo, IExternalComponentUserInfo } from './definition';\nimport { AppsEngineUIMethods } from './definition';\n\ntype HandleActionData = IExternalComponentUserInfo | IExternalComponentRoomInfo;\n\n/**\n * Represents the host which handles API calls from external components.\n */\nexport abstract class AppsEngineUIHost {\n    /**\n     * The message emitter who calling the API.\n     */\n    private responseDestination!: Window;\n\n    constructor() {\n        this.initialize();\n    }\n\n    /**\n     * initialize the AppClientUIHost by registering window `message` listener\n     */\n    public initialize() {\n        window.addEventListener('message', async ({ data, source }) => {\n            if (!data?.hasOwnProperty(MESSAGE_ID)) {\n                return;\n            }\n\n            this.responseDestination = source as Window;\n\n            const {\n                [MESSAGE_ID]: { action, id },\n            } = data;\n\n            switch (action) {\n                case AppsEngineUIMethods.GET_USER_INFO:\n                    this.handleAction(action, id, await this.getClientUserInfo());\n                    break;\n                case AppsEngineUIMethods.GET_ROOM_INFO:\n                    this.handleAction(action, id, await this.getClientRoomInfo());\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Get the current user's information.\n     */\n    public abstract getClientUserInfo(): Promise<IExternalComponentUserInfo>;\n\n    /**\n     * Get the opened room's information.\n     */\n    public abstract getClientRoomInfo(): Promise<IExternalComponentRoomInfo>;\n\n    /**\n     * Handle the action sent from the external component.\n     * @param action the name of the action\n     * @param id the unique id of the  API call\n     * @param data The data that will return to the caller\n     */\n    private async handleAction(action: AppsEngineUIMethods, id: string, data: HandleActionData): Promise<void> {\n        if (this.responseDestination instanceof MessagePort || this.responseDestination instanceof ServiceWorker) {\n            return;\n        }\n\n        this.responseDestination.postMessage(\n            {\n                [MESSAGE_ID]: {\n                    id,\n                    action,\n                    payload: data,\n                } as IAppsEngineUIResponse,\n            },\n            '*',\n        );\n    }\n}\n"]}