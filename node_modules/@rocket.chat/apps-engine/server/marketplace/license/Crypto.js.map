{"version":3,"sources":["src/server/marketplace/license/Crypto.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,mCAAuC;AAIvC,MAAa,MAAM;IACf,YAA6B,cAA+B;QAA/B,mBAAc,GAAd,cAAc,CAAiB;IAAG,CAAC;IAEnD,cAAc,CAAC,OAAe;;YACvC,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,uBAAuB,EAAE,CAAC;YAE7E,IAAI,CAAC,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE;gBAC9C,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC,CAAC,0BAA0B;aAC1F;YAED,MAAM,OAAO,GAAG,IAAA,sBAAa,EAAC,gBAAgB,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;YAEtF,IAAI,OAAO,CAAC;YACZ,IAAI;gBACA,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC5C;YAAC,OAAO,KAAK,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;aAC/C;YAED,OAAO,OAAO,CAAC;QACnB,CAAC;KAAA;CACJ;AArBD,wBAqBC","file":"Crypto.js","sourcesContent":["import { publicDecrypt } from 'crypto';\n\nimport type { IInternalBridge } from '../../bridges';\n\nexport class Crypto {\n    constructor(private readonly internalBridge: IInternalBridge) {}\n\n    public async decryptLicense(content: string): Promise<object> {\n        const publicKeySetting = await this.internalBridge.doGetWorkspacePublicKey();\n\n        if (!publicKeySetting || !publicKeySetting.value) {\n            throw new Error('Public key not available, cannot decrypt'); // TODO: add custom error?\n        }\n\n        const decoded = publicDecrypt(publicKeySetting.value, Buffer.from(content, 'base64'));\n\n        let license;\n        try {\n            license = JSON.parse(decoded.toString());\n        } catch (error) {\n            throw new Error('Invalid license provided');\n        }\n\n        return license;\n    }\n}\n"]}