{"version":3,"sources":["src/server/compiler/modules/index.ts"],"names":[],"mappings":";;;AAAA,6CAAoD;AAEpD,IAAY,sBAcX;AAdD,WAAY,sBAAsB;IAC9B,uCAAa,CAAA;IACb,qCAAW,CAAA;IACX,2CAAiB,CAAA;IACjB,2CAAiB,CAAA;IACjB,2CAAiB,CAAA;IACjB,qCAAW,CAAA;IACX,uCAAa,CAAA;IACb,yCAAe,CAAA;IACf,uCAAa,CAAA;IACb,uCAAa,CAAA;IACb,+CAAqB,CAAA;IACrB,mCAAS,CAAA;IACT,qDAA2B,CAAA;AAC/B,CAAC,EAdW,sBAAsB,sCAAtB,sBAAsB,QAcjC;AAED,MAAa,2BAA4B,SAAQ,KAAK;IAClD,YAAY,MAAc,EAAE,IAAY;QACpC,KAAK,CAAC,sBAAsB,IAAI,cAAc,MAAM,eAAe,CAAC,CAAC;IACzE,CAAC;CACJ;AAJD,kEAIC;AAED,MAAM,cAAc,GAAG,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAElC,MAAM,WAAW,GAAG,GAAG,EAAE,CAAC,CAAC;IACvB,GAAG,EAAE,GAAc,EAAE,CAAC,SAAS;CAClC,CAAC,CAAC;AAEH,MAAM,aAAa,GAAG;IAClB,IAAI,EAAE,cAAc;IACpB,GAAG,EAAE,cAAc;IACnB,MAAM,EAAE,cAAc;IACtB,MAAM,EAAE,cAAc;IACtB,MAAM,EAAE,cAAc;IACtB,GAAG,EAAE,IAAA,iCAAoB,EAAC,KAAK,CAAC;IAChC,IAAI,EAAE,IAAA,iCAAoB,EAAC,MAAM,CAAC;IAClC,KAAK,EAAE,IAAA,iCAAoB,EAAC,OAAO,CAAC;IACpC,IAAI,EAAE,cAAc;IACpB,IAAI,EAAE,cAAc;IACpB,QAAQ,EAAE,cAAc;IACxB,EAAE,EAAE,WAAW;IACf,WAAW,EAAE,cAAc;CAC9B,CAAC;AAEF,SAAgB,mBAAmB,CAAC,MAA8B,EAAE,KAAa,EAAE,QAAa;IAC5F,MAAM,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;IAExC,OAAO,IAAI,KAAK,CACZ,cAAc;IACd,0EAA0E;IAC1E,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC,CAC3D,CAAC;AACN,CAAC;AARD,kDAQC","file":"index.js","sourcesContent":["import { moduleHandlerFactory } from './networking';\n\nexport enum AllowedInternalModules {\n    path = 'path',\n    url = 'url',\n    crypto = 'crypto',\n    buffer = 'buffer',\n    stream = 'stream',\n    net = 'net',\n    http = 'http',\n    https = 'https',\n    zlib = 'zlib',\n    util = 'util',\n    punycode = 'punycode',\n    os = 'os',\n    querystring = 'querystring',\n}\n\nexport class ForbiddenNativeModuleAccess extends Error {\n    constructor(module: string, prop: string) {\n        super(`Access to property ${prop} in module ${module} is forbidden`);\n    }\n}\n\nconst defaultHandler = () => ({});\n\nconst noopHandler = () => ({\n    get: (): undefined => undefined,\n});\n\nconst proxyHandlers = {\n    path: defaultHandler,\n    url: defaultHandler,\n    crypto: defaultHandler,\n    buffer: defaultHandler,\n    stream: defaultHandler,\n    net: moduleHandlerFactory('net'),\n    http: moduleHandlerFactory('http'),\n    https: moduleHandlerFactory('https'),\n    zlib: defaultHandler,\n    util: defaultHandler,\n    punycode: defaultHandler,\n    os: noopHandler,\n    querystring: defaultHandler,\n};\n\nexport function requireNativeModule(module: AllowedInternalModules, appId: string, requirer: any) {\n    const requiredModule = requirer(module);\n\n    return new Proxy(\n        requiredModule,\n        // Creates a proxy handler that is aware of the appId requiring the module\n        Reflect.apply(proxyHandlers[module], undefined, [appId]),\n    );\n}\n"]}