{"version":3,"sources":["src/server/compiler/AppPackageParser.ts"],"names":[],"mappings":"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","file":"AppPackageParser.js","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\n\nimport * as AdmZip from 'adm-zip';\nimport * as semver from 'semver';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { AppImplements } from '.';\nimport type { IAppInfo } from '../../definition/metadata/IAppInfo';\nimport { RequiredApiVersionError } from '../errors';\nimport type { IParseAppPackageResult } from './IParseAppPackageResult';\n\nexport class AppPackageParser {\n    public static uuid4Regex = /^[0-9a-fA-f]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/;\n\n    private allowedIconExts: Array<string> = ['.png', '.jpg', '.jpeg', '.gif'];\n\n    private appsEngineVersion: string;\n\n    constructor() {\n        this.appsEngineVersion = this.getEngineVersion();\n    }\n\n    public async unpackageApp(appPackage: Buffer): Promise<IParseAppPackageResult> {\n        const zip = new AdmZip(appPackage);\n        const infoZip = zip.getEntry('app.json');\n        let info: IAppInfo;\n\n        if (infoZip && !infoZip.isDirectory) {\n            try {\n                info = JSON.parse(infoZip.getData().toString()) as IAppInfo;\n\n                if (!AppPackageParser.uuid4Regex.test(info.id)) {\n                    info.id = uuidv4();\n                    console.warn(\n                        'WARNING: We automatically generated a uuid v4 id for',\n                        info.name,\n                        'since it did not provide us an id. This is NOT',\n                        'recommended as the same App can be installed several times.',\n                    );\n                }\n            } catch (e) {\n                throw new Error('Invalid App package. The \"app.json\" file is not valid json.');\n            }\n        } else {\n            throw new Error('Invalid App package. No \"app.json\" file.');\n        }\n\n        info.classFile = info.classFile.replace('.ts', '.js');\n\n        if (!semver.satisfies(this.appsEngineVersion, info.requiredApiVersion)) {\n            throw new RequiredApiVersionError(info, this.appsEngineVersion);\n        }\n\n        // Load all of the TypeScript only files\n        const files: { [s: string]: string } = {};\n\n        zip.getEntries()\n            .filter((entry) => !entry.isDirectory && entry.entryName.endsWith('.js'))\n            .forEach((entry) => {\n                const norm = path.normalize(entry.entryName);\n\n                // Files which start with `.` are supposed to be hidden\n                if (norm.startsWith('.')) {\n                    return;\n                }\n\n                files[norm] = entry.getData().toString();\n            });\n\n        // Ensure that the main class file exists\n        if (!files[path.normalize(info.classFile)]) {\n            throw new Error(`Invalid App package. Could not find the classFile (${info.classFile}) file.`);\n        }\n\n        const languageContent = this.getLanguageContent(zip);\n\n        // Get the icon's content\n        const iconFile = this.getIconFile(zip, info.iconFile);\n        if (iconFile) {\n            info.iconFileContent = iconFile;\n        }\n\n        const implemented = new AppImplements();\n\n        if (Array.isArray(info.implements)) {\n            info.implements.forEach((interfaceName) => implemented.doesImplement(interfaceName));\n        }\n\n        return {\n            info,\n            files,\n            languageContent,\n            implemented,\n        };\n    }\n\n    private getLanguageContent(zip: AdmZip): { [key: string]: object } {\n        const languageContent: { [key: string]: object } = {};\n\n        zip.getEntries()\n            .filter((entry) => !entry.isDirectory && entry.entryName.startsWith('i18n/') && entry.entryName.endsWith('.json'))\n            .forEach((entry) => {\n                const entrySplit = entry.entryName.split('/');\n                const lang = entrySplit[entrySplit.length - 1].split('.')[0].toLowerCase();\n\n                let content;\n                try {\n                    content = JSON.parse(entry.getData().toString());\n                } catch (e) {\n                    // Failed to parse it, maybe warn them? idk yet\n                }\n\n                languageContent[lang] = Object.assign(languageContent[lang] || {}, content);\n            });\n\n        return languageContent;\n    }\n\n    private getIconFile(zip: AdmZip, filePath: string): string {\n        if (!filePath) {\n            return undefined;\n        }\n\n        const ext = path.extname(filePath);\n        if (!this.allowedIconExts.includes(ext)) {\n            return undefined;\n        }\n\n        const entry = zip.getEntry(filePath);\n\n        if (!entry) {\n            return undefined;\n        }\n\n        if (entry.isDirectory) {\n            return undefined;\n        }\n\n        const base64 = entry.getData().toString('base64');\n\n        return `data:image/${ext.replace('.', '')};base64,${base64}`;\n    }\n\n    private getEngineVersion(): string {\n        const devLocation = path.join(__dirname, '../../../package.json');\n        const prodLocation = path.join(__dirname, '../../package.json');\n\n        let info: { version: string };\n\n        if (fs.existsSync(devLocation)) {\n            info = JSON.parse(fs.readFileSync(devLocation, 'utf8'));\n        } else if (fs.existsSync(prodLocation)) {\n            info = JSON.parse(fs.readFileSync(prodLocation, 'utf8'));\n        } else {\n            throw new Error('Could not find the Apps TypeScript Definition Package Version!');\n        }\n\n        return info.version.replace(/^[^0-9]/, '').split('-')[0];\n    }\n}\n"]}