{"version":3,"sources":["src/server/compiler/AppCompiler.ts"],"names":[],"mappings":"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","file":"AppCompiler.js","sourcesContent":["import * as path from 'path';\n\nimport type { App } from '../../definition/App';\nimport { AppMethod } from '../../definition/metadata';\nimport { AppAccessors } from '../accessors';\nimport type { AppManager } from '../AppManager';\nimport { MustContainFunctionError } from '../errors';\nimport { AppConsole } from '../logging';\nimport { ProxiedApp } from '../ProxiedApp';\nimport { getRuntime } from '../runtime';\nimport { buildCustomRequire } from '../runtime/require';\nimport type { IAppStorageItem } from '../storage';\nimport type { IParseAppPackageResult } from './IParseAppPackageResult';\n\nexport class AppCompiler {\n    public normalizeStorageFiles(files: { [key: string]: string }): { [key: string]: string } {\n        const result: { [key: string]: string } = {};\n\n        Object.entries(files).forEach(([name, content]) => {\n            result[name.replace(/\\$/g, '.')] = content;\n        });\n\n        return result;\n    }\n\n    public async toSandBox(manager: AppManager, storage: IAppStorageItem, { files }: IParseAppPackageResult): Promise<ProxiedApp> {\n        if (typeof files[path.normalize(storage.info.classFile)] === 'undefined') {\n            throw new Error(`Invalid App package for \"${storage.info.name}\". Could not find the classFile (${storage.info.classFile}) file.`);\n        }\n\n        const Runtime = getRuntime();\n\n        const customRequire = buildCustomRequire(files, storage.info.id);\n        const result = await Runtime.runCode(files[path.normalize(storage.info.classFile)], {\n            require: customRequire,\n        });\n\n        if (typeof result !== 'function') {\n            throw new Error(`The App's main class for ${storage.info.name} is not valid (\"${storage.info.classFile}\").`);\n        }\n        const appAccessors = new AppAccessors(manager, storage.info.id);\n        const logger = new AppConsole(AppMethod._CONSTRUCTOR);\n        const rl = await Runtime.runCode(\n            'exports.app = new App(info, rcLogger, appAccessors);',\n            {\n                rcLogger: logger,\n                info: storage.info,\n                App: result,\n                appAccessors,\n            },\n            { timeout: 1000, filename: `App_${storage.info.nameSlug}.js` },\n        );\n\n        // TODO: app is importing the Class App internally so it's not same object to compare. Need to find a way to make this test\n        // if (!(rl instanceof App)) {\n        //     throw new MustExtendAppError();\n        // }\n\n        if (typeof rl.getName !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getName');\n        }\n\n        if (typeof rl.getNameSlug !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getNameSlug');\n        }\n\n        if (typeof rl.getVersion !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getVersion');\n        }\n\n        if (typeof rl.getID !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getID');\n        }\n\n        if (typeof rl.getDescription !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getDescription');\n        }\n\n        if (typeof rl.getRequiredApiVersion !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getRequiredApiVersion');\n        }\n\n        // TODO: Fix this type cast from to any to the right one\n        const app = new ProxiedApp(manager, storage, rl as App, new Runtime(rl as App, customRequire as any));\n\n        await manager.getLogStorage().storeEntries(app.getID(), logger);\n\n        return app;\n    }\n}\n"]}