{"version":3,"sources":["src/server/managers/AppVideoConfProvider.ts"],"names":[],"mappings":"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","file":"AppVideoConfProvider.js","sourcesContent":["import { AppMethod } from '../../definition/metadata';\nimport type { IBlock } from '../../definition/uikit';\nimport type { VideoConference } from '../../definition/videoConferences';\nimport type { IVideoConferenceUser } from '../../definition/videoConferences/IVideoConferenceUser';\nimport type { IVideoConferenceOptions, IVideoConfProvider, VideoConfData, VideoConfDataExtended } from '../../definition/videoConfProviders';\nimport type { ProxiedApp } from '../ProxiedApp';\nimport type { AppLogStorage } from '../storage';\nimport type { AppAccessorManager } from './AppAccessorManager';\n\nexport class AppVideoConfProvider {\n    /**\n     * States whether this provider has been registered into the Rocket.Chat system or not.\n     */\n    public isRegistered: boolean;\n\n    constructor(public app: ProxiedApp, public provider: IVideoConfProvider) {\n        this.isRegistered = false;\n    }\n\n    public hasBeenRegistered(): void {\n        this.isRegistered = true;\n    }\n\n    public canBeRan(method: AppMethod): boolean {\n        return this.app.hasMethod(method);\n    }\n\n    public async runIsFullyConfigured(logStorage: AppLogStorage, accessors: AppAccessorManager): Promise<boolean> {\n        if (typeof this.provider[AppMethod._VIDEOCONF_IS_CONFIGURED] !== 'function') {\n            return true;\n        }\n\n        return !!(await this.runTheCode(AppMethod._VIDEOCONF_IS_CONFIGURED, logStorage, accessors, [])) as boolean;\n    }\n\n    public async runGenerateUrl(call: VideoConfData, logStorage: AppLogStorage, accessors: AppAccessorManager): Promise<string> {\n        return (await this.runTheCode(AppMethod._VIDEOCONF_GENERATE_URL, logStorage, accessors, [call])) as string;\n    }\n\n    public async runCustomizeUrl(\n        call: VideoConfDataExtended,\n        user: IVideoConferenceUser | undefined,\n        options: IVideoConferenceOptions = {},\n        logStorage: AppLogStorage,\n        accessors: AppAccessorManager,\n    ): Promise<string> {\n        return (await this.runTheCode(AppMethod._VIDEOCONF_CUSTOMIZE_URL, logStorage, accessors, [call, user, options])) as string;\n    }\n\n    public async runOnNewVideoConference(call: VideoConference, logStorage: AppLogStorage, accessors: AppAccessorManager): Promise<void> {\n        await this.runTheCode(AppMethod._VIDEOCONF_NEW, logStorage, accessors, [call]);\n    }\n\n    public async runOnVideoConferenceChanged(call: VideoConference, logStorage: AppLogStorage, accessors: AppAccessorManager): Promise<void> {\n        await this.runTheCode(AppMethod._VIDEOCONF_CHANGED, logStorage, accessors, [call]);\n    }\n\n    public async runOnUserJoin(\n        call: VideoConference,\n        user: IVideoConferenceUser | undefined,\n        logStorage: AppLogStorage,\n        accessors: AppAccessorManager,\n    ): Promise<void> {\n        await this.runTheCode(AppMethod._VIDEOCONF_USER_JOINED, logStorage, accessors, [call, user]);\n    }\n\n    public async runGetVideoConferenceInfo(\n        call: VideoConference,\n        user: IVideoConferenceUser | undefined,\n        logStorage: AppLogStorage,\n        accessors: AppAccessorManager,\n    ): Promise<Array<IBlock> | undefined> {\n        return (await this.runTheCode(AppMethod._VIDEOCONF_GET_INFO, logStorage, accessors, [call, user])) as Array<IBlock> | undefined;\n    }\n\n    private async runTheCode(\n        method:\n            | AppMethod._VIDEOCONF_GENERATE_URL\n            | AppMethod._VIDEOCONF_CUSTOMIZE_URL\n            | AppMethod._VIDEOCONF_IS_CONFIGURED\n            | AppMethod._VIDEOCONF_NEW\n            | AppMethod._VIDEOCONF_CHANGED\n            | AppMethod._VIDEOCONF_GET_INFO\n            | AppMethod._VIDEOCONF_USER_JOINED,\n        logStorage: AppLogStorage,\n        accessors: AppAccessorManager,\n        runContextArgs: Array<any>,\n    ): Promise<string | boolean | Array<IBlock> | undefined> {\n        // Ensure the provider has the property before going on\n        if (typeof this.provider[method] !== 'function') {\n            return;\n        }\n\n        const runContext = {\n            provider: this.provider,\n            args: [\n                ...runContextArgs,\n                accessors.getReader(this.app.getID()),\n                accessors.getModifier(this.app.getID()),\n                accessors.getHttp(this.app.getID()),\n                accessors.getPersistence(this.app.getID()),\n            ],\n        };\n\n        const logger = this.app.setupLogger(method);\n        logger.debug(`Executing ${method} on video conference provider...`);\n\n        let result: string | undefined;\n        try {\n            const runCode = `module.exports = provider.${method}.apply(provider, args)`;\n            result = await this.app.getRuntime().runInSandbox(runCode, runContext);\n            logger.debug(`Video Conference Provider's ${method} was successfully executed.`);\n        } catch (e) {\n            logger.error(e);\n            logger.debug(`Video Conference Provider's ${method} was unsuccessful.`);\n        }\n\n        try {\n            await logStorage.storeEntries(this.app.getID(), logger);\n        } catch (e) {\n            // Don't care, at the moment.\n            // TODO: Evaluate to determine if we do care\n        }\n\n        return result;\n    }\n}\n"]}