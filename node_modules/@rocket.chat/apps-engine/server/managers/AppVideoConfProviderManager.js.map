{"version":3,"sources":["src/server/managers/AppVideoConfProviderManager.ts"],"names":[],"mappings":"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","file":"AppVideoConfProviderManager.js","sourcesContent":["import type { IBlock } from '../../definition/uikit';\nimport type { VideoConference } from '../../definition/videoConferences';\nimport type { IVideoConferenceUser } from '../../definition/videoConferences/IVideoConferenceUser';\nimport type { IVideoConferenceOptions, IVideoConfProvider, VideoConfData, VideoConfDataExtended } from '../../definition/videoConfProviders';\nimport type { AppManager } from '../AppManager';\nimport type { VideoConferenceBridge } from '../bridges';\nimport { VideoConfProviderAlreadyExistsError, VideoConfProviderNotRegisteredError } from '../errors';\nimport { PermissionDeniedError } from '../errors/PermissionDeniedError';\nimport { AppPermissions } from '../permissions/AppPermissions';\nimport type { AppAccessorManager } from './AppAccessorManager';\nimport { AppPermissionManager } from './AppPermissionManager';\nimport { AppVideoConfProvider } from './AppVideoConfProvider';\n\nexport class AppVideoConfProviderManager {\n    private readonly accessors: AppAccessorManager;\n\n    private readonly bridge: VideoConferenceBridge;\n\n    private videoConfProviders: Map<string, Map<string, AppVideoConfProvider>>;\n\n    private providerApps: Map<IVideoConfProvider['name'], string>;\n\n    constructor(private readonly manager: AppManager) {\n        this.bridge = this.manager.getBridges().getVideoConferenceBridge();\n        this.accessors = this.manager.getAccessorManager();\n\n        this.videoConfProviders = new Map<string, Map<string, AppVideoConfProvider>>();\n        this.providerApps = new Map<string, string>();\n    }\n\n    public canProviderBeTouchedBy(appId: string, providerName: string): boolean {\n        const key = providerName.toLowerCase().trim();\n        return (key && (!this.providerApps.has(key) || this.providerApps.get(key) === appId)) || false;\n    }\n\n    public isAlreadyDefined(providerName: string): boolean {\n        const search = providerName.toLowerCase().trim();\n\n        for (const [, providers] of this.videoConfProviders) {\n            if (providers.has(search)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public addProvider(appId: string, provider: IVideoConfProvider): void {\n        const app = this.manager.getOneById(appId);\n        if (!app) {\n            throw new Error('App must exist in order for a video conference provider to be added.');\n        }\n\n        if (!AppPermissionManager.hasPermission(appId, AppPermissions.videoConference.provider)) {\n            throw new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.videoConference.provider],\n            });\n        }\n\n        const providerName = provider.name.toLowerCase().trim();\n        if (!this.canProviderBeTouchedBy(appId, providerName)) {\n            throw new VideoConfProviderAlreadyExistsError(provider.name);\n        }\n\n        if (!this.videoConfProviders.has(appId)) {\n            this.videoConfProviders.set(appId, new Map<string, AppVideoConfProvider>());\n        }\n\n        this.videoConfProviders.get(appId)!.set(providerName, new AppVideoConfProvider(app, provider));\n        this.linkAppProvider(appId, providerName);\n    }\n\n    public registerProviders(appId: string): void {\n        if (!this.videoConfProviders.has(appId)) {\n            return;\n        }\n\n        const appProviders = this.videoConfProviders.get(appId);\n        if (!appProviders) {\n            return;\n        }\n\n        for (const [, providerInfo] of appProviders) {\n            this.registerProvider(appId, providerInfo);\n        }\n    }\n\n    public unregisterProviders(appId: string): void {\n        if (!this.videoConfProviders.has(appId)) {\n            return;\n        }\n\n        const appProviders = this.videoConfProviders.get(appId)!;\n        for (const [, providerInfo] of appProviders) {\n            this.unregisterProvider(appId, providerInfo);\n        }\n\n        this.videoConfProviders.delete(appId);\n    }\n\n    public async isFullyConfigured(providerName: string): Promise<boolean> {\n        const providerInfo = this.retrieveProviderInfo(providerName);\n        if (!providerInfo) {\n            throw new VideoConfProviderNotRegisteredError(providerName);\n        }\n\n        return providerInfo.runIsFullyConfigured(this.manager.getLogStorage(), this.accessors);\n    }\n\n    public async onNewVideoConference(providerName: string, call: VideoConference): Promise<void> {\n        const providerInfo = this.retrieveProviderInfo(providerName);\n        if (!providerInfo) {\n            throw new VideoConfProviderNotRegisteredError(providerName);\n        }\n\n        return providerInfo.runOnNewVideoConference(call, this.manager.getLogStorage(), this.accessors);\n    }\n\n    public async onVideoConferenceChanged(providerName: string, call: VideoConference): Promise<void> {\n        const providerInfo = this.retrieveProviderInfo(providerName);\n        if (!providerInfo) {\n            throw new VideoConfProviderNotRegisteredError(providerName);\n        }\n\n        return providerInfo.runOnVideoConferenceChanged(call, this.manager.getLogStorage(), this.accessors);\n    }\n\n    public async onUserJoin(providerName: string, call: VideoConference, user?: IVideoConferenceUser): Promise<void> {\n        const providerInfo = this.retrieveProviderInfo(providerName);\n        if (!providerInfo) {\n            throw new VideoConfProviderNotRegisteredError(providerName);\n        }\n\n        return providerInfo.runOnUserJoin(call, user, this.manager.getLogStorage(), this.accessors);\n    }\n\n    public async getVideoConferenceInfo(providerName: string, call: VideoConference, user?: IVideoConferenceUser): Promise<Array<IBlock> | undefined> {\n        const providerInfo = this.retrieveProviderInfo(providerName);\n        if (!providerInfo) {\n            throw new VideoConfProviderNotRegisteredError(providerName);\n        }\n\n        return providerInfo.runGetVideoConferenceInfo(call, user, this.manager.getLogStorage(), this.accessors);\n    }\n\n    public async generateUrl(providerName: string, call: VideoConfData): Promise<string> {\n        const providerInfo = this.retrieveProviderInfo(providerName);\n        if (!providerInfo) {\n            throw new VideoConfProviderNotRegisteredError(providerName);\n        }\n\n        return providerInfo.runGenerateUrl(call, this.manager.getLogStorage(), this.accessors);\n    }\n\n    public async customizeUrl(\n        providerName: string,\n        call: VideoConfDataExtended,\n        user?: IVideoConferenceUser,\n        options?: IVideoConferenceOptions,\n    ): Promise<string> {\n        const providerInfo = this.retrieveProviderInfo(providerName);\n        if (!providerInfo) {\n            throw new VideoConfProviderNotRegisteredError(providerName);\n        }\n\n        return providerInfo.runCustomizeUrl(call, user, options, this.manager.getLogStorage(), this.accessors);\n    }\n\n    private retrieveProviderInfo(providerName: string): AppVideoConfProvider | undefined {\n        const key = providerName.toLowerCase().trim();\n\n        for (const [, providers] of this.videoConfProviders) {\n            if (!providers.has(key)) {\n                continue;\n            }\n\n            const provider = providers.get(key)!;\n            if (provider.isRegistered) {\n                return provider;\n            }\n        }\n    }\n\n    private linkAppProvider(appId: string, providerName: string): void {\n        this.providerApps.set(providerName, appId);\n    }\n\n    private registerProvider(appId: string, info: AppVideoConfProvider): void {\n        this.bridge.doRegisterProvider(info.provider, appId);\n        info.hasBeenRegistered();\n    }\n\n    private unregisterProvider(appId: string, info: AppVideoConfProvider): void {\n        const key = info.provider.name.toLowerCase().trim();\n\n        this.bridge.doUnRegisterProvider(info.provider, appId);\n        this.providerApps.delete(key);\n\n        info.isRegistered = false;\n\n        const map = this.videoConfProviders.get(appId);\n        if (map) {\n            map.delete(key);\n        }\n    }\n}\n"]}