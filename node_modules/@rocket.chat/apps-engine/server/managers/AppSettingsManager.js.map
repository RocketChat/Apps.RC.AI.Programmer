{"version":3,"sources":["src/server/managers/AppSettingsManager.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,wDAAsD;AAItD,iDAA8C;AAE9C,MAAa,kBAAkB;IAC3B,YAAoB,OAAmB;QAAnB,YAAO,GAAP,OAAO,CAAY;IAAG,CAAC;IAEpC,cAAc,CAAC,KAAa;QAC/B,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAE1C,IAAI,CAAC,EAAE,EAAE;YACL,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;SACvD;QAED,OAAO,qBAAS,CAAC,kBAAkB,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,QAAQ,CAAC,CAAC;IACtE,CAAC;IAEM,aAAa,CAAC,KAAa,EAAE,SAAiB;QACjD,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAE5C,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACvE;QAED,OAAO,qBAAS,CAAC,kBAAkB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;IAC7D,CAAC;IAEY,gBAAgB,CAAC,KAAa,EAAE,OAAiB;;YAC1D,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAE1C,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;aACvD;YAED,MAAM,UAAU,GAAG,EAAE,CAAC,cAAc,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC5D,IAAI,CAAC,UAAU,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;aACvE;YAED,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC,sBAAsB,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;YAC1F,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;YACvE,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;YACnE,MAAM,gBAAgB,GAClB,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,oBAAS,CAAC,qBAAqB,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,EAA2B,EAAE,YAAY,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;gBAC1I,OAAO,CAAC;YAEZ,gBAAgB,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;YACxC,EAAE,CAAC,cAAc,EAAE,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC;YAErE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,CAAC;YAEzE,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAExB,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,yBAAyB,EAAE,CAAC,qBAAqB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;YAErG,MAAM,EAAE,CAAC,IAAI,CAAC,oBAAS,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,YAAY,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QAC5F,CAAC;KAAA;CACJ;AArDD,gDAqDC","file":"AppSettingsManager.js","sourcesContent":["import { AppMethod } from '../../definition/metadata';\nimport type { ISetting } from '../../definition/settings';\nimport type { ISettingUpdateContext } from '../../definition/settings/ISettingUpdateContext';\nimport type { AppManager } from '../AppManager';\nimport { Utilities } from '../misc/Utilities';\n\nexport class AppSettingsManager {\n    constructor(private manager: AppManager) {}\n\n    public getAppSettings(appId: string): { [key: string]: ISetting } {\n        const rl = this.manager.getOneById(appId);\n\n        if (!rl) {\n            throw new Error('No App found by the provided id.');\n        }\n\n        return Utilities.deepCloneAndFreeze(rl.getStorageItem().settings);\n    }\n\n    public getAppSetting(appId: string, settingId: string): ISetting {\n        const settings = this.getAppSettings(appId);\n\n        if (!settings[settingId]) {\n            throw new Error('No setting found for the App by the provided id.');\n        }\n\n        return Utilities.deepCloneAndFreeze(settings[settingId]);\n    }\n\n    public async updateAppSetting(appId: string, setting: ISetting): Promise<void> {\n        const rl = this.manager.getOneById(appId);\n\n        if (!rl) {\n            throw new Error('No App found by the provided id.');\n        }\n\n        const oldSetting = rl.getStorageItem().settings[setting.id];\n        if (!oldSetting) {\n            throw new Error('No setting found for the App by the provided id.');\n        }\n\n        const configModify = this.manager.getAccessorManager().getConfigurationModify(rl.getID());\n        const reader = this.manager.getAccessorManager().getReader(rl.getID());\n        const http = this.manager.getAccessorManager().getHttp(rl.getID());\n        const decoratedSetting =\n            (await rl.call(AppMethod.ON_PRE_SETTING_UPDATE, { oldSetting, newSetting: setting } as ISettingUpdateContext, configModify, reader, http)) ||\n            setting;\n\n        decoratedSetting.updatedAt = new Date();\n        rl.getStorageItem().settings[decoratedSetting.id] = decoratedSetting;\n\n        const item = await this.manager.getStorage().update(rl.getStorageItem());\n\n        rl.setStorageItem(item);\n\n        this.manager.getBridges().getAppDetailChangesBridge().doOnAppSettingsChange(appId, decoratedSetting);\n\n        await rl.call(AppMethod.ONSETTINGUPDATED, decoratedSetting, configModify, reader, http);\n    }\n}\n"]}