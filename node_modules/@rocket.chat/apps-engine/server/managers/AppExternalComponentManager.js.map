{"version":3,"sources":["src/server/managers/AppExternalComponentManager.ts"],"names":[],"mappings":"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","file":"AppExternalComponentManager.js","sourcesContent":["import type { IExternalComponent } from '../../definition/externalComponent';\n\n/**\n * The external component manager for the apps.\n *\n * An app will register external components during its `initialize` method.\n * Then once an app's `onEnable` method is called and it returns true,\n * only then will that app's external components be enabled.\n */\nexport class AppExternalComponentManager {\n    /**\n     * The map that maintains all registered components.\n     * The key of the top map is app id and the key of inner map is the\n     * external component name.\n     */\n    private registeredExternalComponents: Map<string, Map<string, IExternalComponent>>;\n\n    /**\n     * Contains the apps and the external components they have touhed.\n     * The key of the top map is app id and the key of inner map is the\n     * external component name.\n     * Doesn't matter whether the app provided, modified, disabled,\n     * or enabled. As long as an app touched external components, then\n     * they are listed here.\n     */\n    private appTouchedExternalComponents: Map<string, Map<string, IExternalComponent>>;\n\n    constructor() {\n        this.registeredExternalComponents = new Map<string, Map<string, IExternalComponent>>();\n        this.appTouchedExternalComponents = new Map<string, Map<string, IExternalComponent>>();\n    }\n\n    /**\n     * Get all registered components.\n     */\n    public getRegisteredExternalComponents(): Map<string, Map<string, IExternalComponent>> {\n        return this.registeredExternalComponents;\n    }\n\n    /**\n     * Get all external components that apps have registered\n     * before, including disabled apps' external components.\n     */\n    public getAppTouchedExternalComponents(): Map<string, Map<string, IExternalComponent>> {\n        return this.appTouchedExternalComponents;\n    }\n\n    /**\n     * Get all external components of an app by specifying the appId.\n     *\n     * @param appId the id of the app\n     */\n    public getExternalComponents(appId: string): Map<string, IExternalComponent> {\n        if (this.appTouchedExternalComponents.has(appId)) {\n            return this.appTouchedExternalComponents.get(appId);\n        }\n\n        return null;\n    }\n\n    /**\n     * Get an array of external components which are enabled and ready for usage.\n     */\n    public getProvidedComponents(): Array<IExternalComponent> {\n        const registeredExternalComponents = this.getRegisteredExternalComponents();\n        const providedComponents: Array<IExternalComponent> = [];\n\n        registeredExternalComponents.forEach((appExternalComponents) => {\n            Array.from(appExternalComponents.values()).forEach((externalComponent) => {\n                providedComponents.push(externalComponent);\n            });\n        });\n\n        return providedComponents;\n    }\n\n    /**\n     * Add an external component to the appTouchedExternalComponents.\n     * If you call this method twice and the component\n     * has the same name as before, the first one will be\n     * overwritten as the names provided **must** be unique.\n     *\n     * @param appId the id of the app\n     * @param externalComponent the external component about to be added\n     */\n    public addExternalComponent(appId: string, externalComponent: IExternalComponent): void {\n        externalComponent.appId = appId;\n\n        if (!this.appTouchedExternalComponents.get(appId)) {\n            this.appTouchedExternalComponents.set(appId, new Map(Object.entries({ [externalComponent.name]: externalComponent })));\n        } else {\n            const appExternalComponents = this.appTouchedExternalComponents.get(appId);\n\n            appExternalComponents.set(externalComponent.name, externalComponent);\n        }\n    }\n\n    /**\n     * Add enabled apps' external components from the appTouchedExternalComponents\n     * to the registeredExternalComponents.\n     *\n     * @param appId the id of the app\n     */\n    public registerExternalComponents(appId: string): void {\n        if (!this.appTouchedExternalComponents.has(appId)) {\n            return;\n        }\n        const externalComponents = this.appTouchedExternalComponents.get(appId);\n\n        if (externalComponents.size > 0) {\n            this.registeredExternalComponents.set(appId, externalComponents);\n        }\n    }\n\n    /**\n     * Remove all external components of an app from the\n     * registeredExternalComponents by specifying the appId.\n     *\n     * @param appId the id of the app\n     */\n    public unregisterExternalComponents(appId: string): void {\n        if (this.registeredExternalComponents.has(appId)) {\n            this.registeredExternalComponents.delete(appId);\n        }\n    }\n\n    /**\n     * Remove all external components of an app from both the\n     * registeredExternalComponents and the appTouchedComponents\n     * by specifying the appId.\n     *\n     * @param appId the id of the app\n     */\n    public purgeExternalComponents(appId: string): void {\n        if (this.appTouchedExternalComponents.has(appId)) {\n            this.appTouchedExternalComponents.delete(appId);\n        }\n        if (this.registeredExternalComponents.has(appId)) {\n            this.registeredExternalComponents.delete(appId);\n        }\n    }\n}\n"]}