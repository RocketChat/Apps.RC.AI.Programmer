{"version":3,"sources":["src/server/managers/AppPermissionManager.ts"],"names":[],"mappings":";;;AACA,8CAAsD;AACtD,2EAAwE;AACxE,oEAA+E;AAE/E,MAAa,oBAAoB;IAC7B;;OAEG;IACI,MAAM,CAAC,aAAa,CAAwB,KAAa,EAAE,UAAa;QAC3E,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,EAAE;YACjC,OAAO,UAAU,CAAC;SACrB;QAED,MAAM,iBAAiB,GAAG,IAAA,kCAAqB,EAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI,CAAY,CAAC;QAE/G,IAAI,CAAC,iBAAiB,EAAE;YACpB,OAAO,SAAS,CAAC;SACpB;QAED,OAAO,iBAAsB,CAAC;IAClC,CAAC;IAEM,MAAM,CAAC,gBAAgB,CAAC,GAAU;QACrC,IAAI,GAAG,YAAY,6CAAqB,EAAE;YACtC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC;YAE9B,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,KAAK,OAAO,KAAK,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;SAChE;aAAM;YACH,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACtB;IACL,CAAC;IAEO,MAAM,CAAC,YAAY;QACvB,MAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,aAAa,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,mDAA+B,CAAC,CAAC,CAAC;QAExG,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC;CACJ;AAlCD,oDAkCC","file":"AppPermissionManager.js","sourcesContent":["import type { IPermission } from '../../definition/permissions/IPermission';\nimport { getPermissionsByAppId } from '../AppManager';\nimport { PermissionDeniedError } from '../errors/PermissionDeniedError';\nimport { APPS_ENGINE_RUNTIME_FILE_PREFIX } from '../runtime/AppsEngineRuntime';\n\nexport class AppPermissionManager {\n    /**\n     * It returns the declaration of the permission if the app declared, or it returns `undefined`.\n     */\n    public static hasPermission<P extends IPermission>(appId: string, permission: P): P | undefined {\n        if (process.env.NODE_ENV === 'test') {\n            return permission;\n        }\n\n        const grantedPermission = getPermissionsByAppId(appId).find(({ name }) => name === permission.name) as unknown;\n\n        if (!grantedPermission) {\n            return undefined;\n        }\n\n        return grantedPermission as P;\n    }\n\n    public static notifyAboutError(err: Error): void {\n        if (err instanceof PermissionDeniedError) {\n            const { name, message } = err;\n\n            console.error(`${name}: ${message}\\n${this.getCallStack()}`);\n        } else {\n            console.error(err);\n        }\n    }\n\n    private static getCallStack(): string {\n        const stack = new Error().stack.toString().split('\\n');\n        const appStackIndex = stack.findIndex((position) => position.includes(APPS_ENGINE_RUNTIME_FILE_PREFIX));\n\n        return stack.slice(4, appStackIndex).join('\\n');\n    }\n}\n"]}