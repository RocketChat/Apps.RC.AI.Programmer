{"version":3,"sources":["src/server/managers/AppSignatureManager.ts"],"names":[],"mappings":"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","file":"AppSignatureManager.js","sourcesContent":["import { createHash } from 'crypto';\n\nimport * as jose from 'jose';\n\nimport type { AppManager } from '../AppManager';\nimport type { IInternalFederationBridge } from '../bridges';\nimport type { IAppStorageItem } from '../storage';\n\nexport class AppSignatureManager {\n    private readonly federationBridge: IInternalFederationBridge;\n\n    private readonly checksumAlgorithm = 'SHA256';\n\n    private readonly signingAlgorithm = 'RS512';\n\n    private privateKey: string;\n\n    private publicKey: string;\n\n    constructor(private readonly manager: AppManager) {\n        this.federationBridge = this.manager.getBridges().getInternalFederationBridge();\n    }\n\n    public async verifySignedApp(app: IAppStorageItem): Promise<void> {\n        const publicKey = await jose.importSPKI(await this.getPublicKey(), 'pem');\n        const { payload } = await jose.jwtVerify(app.signature, publicKey);\n\n        const checksum = this.calculateChecksumForApp(app);\n\n        if (payload.checksum !== checksum) {\n            throw new Error('Invalid checksum');\n        }\n    }\n\n    public async signApp(app: IAppStorageItem): Promise<string> {\n        const checksum = this.calculateChecksumForApp(app);\n        const privateKey = await jose.importPKCS8(await this.getPrivateKey(), this.signingAlgorithm);\n        const signature = await new jose.SignJWT({ checksum, calg: this.checksumAlgorithm })\n            .setProtectedHeader({ alg: this.signingAlgorithm })\n            .setIssuedAt()\n            .sign(privateKey);\n\n        return signature;\n    }\n\n    private async getPrivateKey(): Promise<string> {\n        if (!this.privateKey) {\n            this.privateKey = await this.federationBridge.getPrivateKey();\n        }\n        return this.privateKey;\n    }\n\n    private async getPublicKey(): Promise<string> {\n        if (!this.publicKey) {\n            this.publicKey = await this.federationBridge.getPublicKey();\n        }\n        return this.publicKey;\n    }\n\n    private calculateChecksumForApp(app: IAppStorageItem, alg = this.checksumAlgorithm): string {\n        return createHash(alg).update(this.getFieldsForChecksum(app)).digest('hex');\n    }\n\n    private getFieldsForChecksum(obj: IAppStorageItem): string {\n        // These fields don't hold valuable information and should NOT invalidate\n        // the checksum\n        const fieldsToIgnore = ['_id', 'status', 'signature', 'updatedAt', 'createdAt', '_updatedAt', '_createdAt', 'settings'];\n\n        // TODO revisit algorithm\n        const allKeys: Array<string> = [];\n        const seen: Record<string, unknown> = {};\n\n        JSON.stringify(obj, (key, value) => {\n            if (!(key in seen)) {\n                allKeys.push(key);\n                seen[key] = null;\n            }\n            return value;\n        });\n\n        const filteredKeys = allKeys.sort().filter((key) => !fieldsToIgnore.includes(key));\n\n        return JSON.stringify(obj, filteredKeys);\n    }\n}\n"]}