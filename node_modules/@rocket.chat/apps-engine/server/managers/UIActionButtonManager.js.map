{"version":3,"sources":["src/server/managers/UIActionButtonManager.ts"],"names":[],"mappings":";;;AAGA,2EAAwE;AACxE,kEAA+D;AAC/D,iEAA8D;AAE9D,MAAa,qBAAqB;IAK9B,YAAY,OAAmB;QAFvB,4BAAuB,GAAG,IAAI,GAAG,EAAkD,CAAC;QAGxF,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC,sBAAsB,EAAE,CAAC;IAC1E,CAAC;IAEM,oBAAoB,CAAC,KAAa,EAAE,MAAiC;QACxE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;YAC5B,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC1C,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;SACtD;QAED,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAErE,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC;QAEzC,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,qBAAqB,CAAC,KAAa;QACtC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;QACnD,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC;IAC7C,CAAC;IAEM,mBAAmB,CAAC,KAAa;QACpC,OAAO,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC;IAEM,mBAAmB;QACtB,MAAM,UAAU,GAA2B,EAAE,CAAC;QAE9C,8CAA8C;QAC9C,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,KAAK,EAAE,EAAE,CACvD,UAAU,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE,CAC1B,UAAU,CAAC,IAAI,iCACR,MAAM,KACT,KAAK,IACP,CACL,CACJ,CAAC;QAEF,OAAO,UAAU,CAAC;IACtB,CAAC;IAEO,aAAa,CAAC,KAAa;QAC/B,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,EAAE,CAAC,eAAe,CAAC,EAAE;YAC9E,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,EAAE,CAAC,eAAe,CAAC;SAC1D,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AAhED,sDAgEC","file":"UIActionButtonManager.js","sourcesContent":["import type { IUIActionButton, IUIActionButtonDescriptor } from '../../definition/ui';\nimport type { AppManager } from '../AppManager';\nimport type { AppActivationBridge } from '../bridges';\nimport { PermissionDeniedError } from '../errors/PermissionDeniedError';\nimport { AppPermissions } from '../permissions/AppPermissions';\nimport { AppPermissionManager } from './AppPermissionManager';\n\nexport class UIActionButtonManager {\n    private readonly activationBridge: AppActivationBridge;\n\n    private registeredActionButtons = new Map<string, Map<string, IUIActionButtonDescriptor>>();\n\n    constructor(manager: AppManager) {\n        this.activationBridge = manager.getBridges().getAppActivationBridge();\n    }\n\n    public registerActionButton(appId: string, button: IUIActionButtonDescriptor) {\n        if (!this.hasPermission(appId)) {\n            return false;\n        }\n\n        if (!this.registeredActionButtons.has(appId)) {\n            this.registeredActionButtons.set(appId, new Map());\n        }\n\n        this.registeredActionButtons.get(appId).set(button.actionId, button);\n\n        this.activationBridge.doActionsChanged();\n\n        return true;\n    }\n\n    public clearAppActionButtons(appId: string) {\n        this.registeredActionButtons.set(appId, new Map());\n        this.activationBridge.doActionsChanged();\n    }\n\n    public getAppActionButtons(appId: string) {\n        return this.registeredActionButtons.get(appId);\n    }\n\n    public getAllActionButtons() {\n        const buttonList: Array<IUIActionButton> = [];\n\n        // Flatten map to a simple list of all buttons\n        this.registeredActionButtons.forEach((appButtons, appId) =>\n            appButtons.forEach((button) =>\n                buttonList.push({\n                    ...button,\n                    appId,\n                }),\n            ),\n        );\n\n        return buttonList;\n    }\n\n    private hasPermission(appId: string) {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.ui.registerButtons)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.ui.registerButtons],\n            }),\n        );\n\n        return false;\n    }\n}\n"]}