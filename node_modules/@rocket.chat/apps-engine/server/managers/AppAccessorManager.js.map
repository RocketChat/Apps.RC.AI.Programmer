{"version":3,"sources":["src/server/managers/AppAccessorManager.ts"],"names":[],"mappings":"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","file":"AppAccessorManager.js","sourcesContent":["import type {\n    IConfigurationExtend,\n    IConfigurationModify,\n    IEnvironmentRead,\n    IEnvironmentWrite,\n    IHttp,\n    IHttpExtend,\n    IModify,\n    IPersistence,\n    IRead,\n} from '../../definition/accessors';\nimport {\n    ApiExtend,\n    ConfigurationExtend,\n    ConfigurationModify,\n    EnvironmentalVariableRead,\n    EnvironmentRead,\n    EnvironmentWrite,\n    ExternalComponentsExtend,\n    Http,\n    HttpExtend,\n    LivechatRead,\n    MessageRead,\n    Modify,\n    Notifier,\n    OAuthAppsReader,\n    Persistence,\n    PersistenceRead,\n    Reader,\n    RoleRead,\n    RoomRead,\n    SchedulerExtend,\n    SchedulerModify,\n    ServerSettingRead,\n    ServerSettingsModify,\n    ServerSettingUpdater,\n    SettingRead,\n    SettingsExtend,\n    SettingUpdater,\n    SlashCommandsExtend,\n    SlashCommandsModify,\n    UploadRead,\n    UserRead,\n    VideoConferenceRead,\n    VideoConfProviderExtend,\n} from '../accessors';\nimport { CloudWorkspaceRead } from '../accessors/CloudWorkspaceRead';\nimport { ThreadRead } from '../accessors/ThreadRead';\nimport { UIExtend } from '../accessors/UIExtend';\nimport type { AppManager } from '../AppManager';\nimport type { AppBridges } from '../bridges/AppBridges';\n\nexport class AppAccessorManager {\n    private readonly bridges: AppBridges;\n\n    private readonly configExtenders: Map<string, IConfigurationExtend>;\n\n    private readonly envReaders: Map<string, IEnvironmentRead>;\n\n    private readonly envWriters: Map<string, IEnvironmentWrite>;\n\n    private readonly configModifiers: Map<string, IConfigurationModify>;\n\n    private readonly readers: Map<string, IRead>;\n\n    private readonly modifiers: Map<string, IModify>;\n\n    private readonly persists: Map<string, IPersistence>;\n\n    private readonly https: Map<string, IHttp>;\n\n    constructor(private readonly manager: AppManager) {\n        this.bridges = this.manager.getBridges();\n        this.configExtenders = new Map<string, IConfigurationExtend>();\n        this.envReaders = new Map<string, IEnvironmentRead>();\n        this.envWriters = new Map<string, IEnvironmentWrite>();\n        this.configModifiers = new Map<string, IConfigurationModify>();\n        this.readers = new Map<string, IRead>();\n        this.modifiers = new Map<string, IModify>();\n        this.persists = new Map<string, IPersistence>();\n        this.https = new Map<string, IHttp>();\n    }\n\n    /**\n     * Purifies the accessors for the provided App.\n     *\n     * @param appId The id of the App to purge the accessors for.\n     */\n    public purifyApp(appId: string): void {\n        this.configExtenders.delete(appId);\n        this.envReaders.delete(appId);\n        this.envWriters.delete(appId);\n        this.configModifiers.delete(appId);\n        this.readers.delete(appId);\n        this.modifiers.delete(appId);\n        this.persists.delete(appId);\n        this.https.delete(appId);\n    }\n\n    public getConfigurationExtend(appId: string): IConfigurationExtend {\n        if (!this.configExtenders.has(appId)) {\n            const rl = this.manager.getOneById(appId);\n\n            if (!rl) {\n                throw new Error(`No App found by the provided id: ${appId}`);\n            }\n\n            const htt = new HttpExtend();\n            const cmds = new SlashCommandsExtend(this.manager.getCommandManager(), appId);\n            const videoConf = new VideoConfProviderExtend(this.manager.getVideoConfProviderManager(), appId);\n            const apis = new ApiExtend(this.manager.getApiManager(), appId);\n            const sets = new SettingsExtend(rl);\n            const excs = new ExternalComponentsExtend(this.manager.getExternalComponentManager(), appId);\n            const scheduler = new SchedulerExtend(this.manager.getSchedulerManager(), appId);\n            const ui = new UIExtend(this.manager.getUIActionButtonManager(), appId);\n\n            this.configExtenders.set(appId, new ConfigurationExtend(htt, sets, cmds, apis, excs, scheduler, ui, videoConf));\n        }\n\n        return this.configExtenders.get(appId);\n    }\n\n    public getEnvironmentRead(appId: string): IEnvironmentRead {\n        if (!this.envReaders.has(appId)) {\n            const rl = this.manager.getOneById(appId);\n\n            if (!rl) {\n                throw new Error(`No App found by the provided id: ${appId}`);\n            }\n\n            const sets = new SettingRead(rl);\n            const servsets = new ServerSettingRead(this.bridges.getServerSettingBridge(), appId);\n            const env = new EnvironmentalVariableRead(this.bridges.getEnvironmentalVariableBridge(), appId);\n\n            this.envReaders.set(appId, new EnvironmentRead(sets, servsets, env));\n        }\n\n        return this.envReaders.get(appId);\n    }\n\n    public getEnvironmentWrite(appId: string): IEnvironmentWrite {\n        if (!this.envWriters.has(appId)) {\n            const rl = this.manager.getOneById(appId);\n\n            if (!rl) {\n                throw new Error(`No App found by the provided id: ${appId}`);\n            }\n\n            const sets = new SettingUpdater(rl, this.manager.getSettingsManager());\n            const serverSetting = new ServerSettingUpdater(this.bridges, appId);\n\n            this.envWriters.set(appId, new EnvironmentWrite(sets, serverSetting));\n        }\n\n        return this.envWriters.get(appId);\n    }\n\n    public getConfigurationModify(appId: string): IConfigurationModify {\n        if (!this.configModifiers.has(appId)) {\n            this.configModifiers.set(\n                appId,\n                new ConfigurationModify(\n                    new ServerSettingsModify(this.bridges.getServerSettingBridge(), appId),\n                    new SlashCommandsModify(this.manager.getCommandManager(), appId),\n                    new SchedulerModify(this.bridges.getSchedulerBridge(), appId),\n                ),\n            );\n        }\n\n        return this.configModifiers.get(appId);\n    }\n\n    public getReader(appId: string): IRead {\n        if (!this.readers.has(appId)) {\n            const env = this.getEnvironmentRead(appId);\n            const msg = new MessageRead(this.bridges.getMessageBridge(), appId);\n            const persist = new PersistenceRead(this.bridges.getPersistenceBridge(), appId);\n            const room = new RoomRead(this.bridges.getRoomBridge(), appId);\n            const user = new UserRead(this.bridges.getUserBridge(), appId);\n            const noti = new Notifier(this.bridges.getUserBridge(), this.bridges.getMessageBridge(), appId);\n            const livechat = new LivechatRead(this.bridges.getLivechatBridge(), appId);\n            const upload = new UploadRead(this.bridges.getUploadBridge(), appId);\n            const cloud = new CloudWorkspaceRead(this.bridges.getCloudWorkspaceBridge(), appId);\n            const videoConf = new VideoConferenceRead(this.bridges.getVideoConferenceBridge(), appId);\n            const oauthApps = new OAuthAppsReader(this.bridges.getOAuthAppsBridge(), appId);\n\n            const thread = new ThreadRead(this.bridges.getThreadBridge(), appId);\n\n            const role = new RoleRead(this.bridges.getRoleBridge(), appId);\n\n            this.readers.set(appId, new Reader(env, msg, persist, room, user, noti, livechat, upload, cloud, videoConf, oauthApps, thread, role));\n        }\n\n        return this.readers.get(appId);\n    }\n\n    public getModifier(appId: string): IModify {\n        if (!this.modifiers.has(appId)) {\n            this.modifiers.set(appId, new Modify(this.bridges, appId));\n        }\n\n        return this.modifiers.get(appId);\n    }\n\n    public getPersistence(appId: string): IPersistence {\n        if (!this.persists.has(appId)) {\n            this.persists.set(appId, new Persistence(this.bridges.getPersistenceBridge(), appId));\n        }\n\n        return this.persists.get(appId);\n    }\n\n    public getHttp(appId: string): IHttp {\n        if (!this.https.has(appId)) {\n            let ext: IHttpExtend;\n            if (this.configExtenders.has(appId)) {\n                ext = this.configExtenders.get(appId).http;\n            } else {\n                const cf = this.getConfigurationExtend(appId);\n                ext = cf.http;\n            }\n\n            this.https.set(appId, new Http(this, this.bridges, ext, appId));\n        }\n\n        return this.https.get(appId);\n    }\n}\n"]}