{"version":3,"sources":["src/server/accessors/EnvironmentalVariableRead.ts"],"names":[],"mappings":";;;AAGA,MAAa,yBAAyB;IAClC,YAA6B,MAAmC,EAAmB,KAAa;QAAnE,WAAM,GAAN,MAAM,CAA6B;QAAmB,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAE7F,cAAc,CAAC,UAAkB;QACpC,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAChE,CAAC;IAEM,UAAU,CAAC,UAAkB;QAChC,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC;IAEM,KAAK,CAAC,UAAkB;QAC3B,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACvD,CAAC;CACJ;AAdD,8DAcC","file":"EnvironmentalVariableRead.js","sourcesContent":["import type { EnvironmentalVariableBridge } from '../bridges';\nimport type { IEnvironmentalVariableRead } from '../../definition/accessors';\n\nexport class EnvironmentalVariableRead implements IEnvironmentalVariableRead {\n    constructor(private readonly bridge: EnvironmentalVariableBridge, private readonly appId: string) {}\n\n    public getValueByName(envVarName: string): Promise<string> {\n        return this.bridge.doGetValueByName(envVarName, this.appId);\n    }\n\n    public isReadable(envVarName: string): Promise<boolean> {\n        return this.bridge.doIsReadable(envVarName, this.appId);\n    }\n\n    public isSet(envVarName: string): Promise<boolean> {\n        return this.bridge.doIsSet(envVarName, this.appId);\n    }\n}\n"]}