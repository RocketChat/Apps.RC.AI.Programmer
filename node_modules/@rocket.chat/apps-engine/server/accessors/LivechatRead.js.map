{"version":3,"sources":["src/server/accessors/LivechatRead.ts"],"names":[],"mappings":";;;AAOA,MAAa,YAAY;IACrB,YAA6B,cAA8B,EAAmB,KAAa;QAA9D,mBAAc,GAAd,cAAc,CAAgB;QAAmB,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAE/F;;;OAGG;IACI,QAAQ,CAAC,YAAqB;QACjC,OAAO,CAAC,IAAI,CAAC,gIAAgI,CAAC,CAAC;QAE/I,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACpE,CAAC;IAEM,aAAa,CAAC,YAAqB;QACtC,OAAO,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACzE,CAAC;IAEM,+BAA+B;QAClC,OAAO,IAAI,CAAC,cAAc,CAAC,kCAAkC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9E,CAAC;IAEM,gBAAgB,CAAC,OAAiB,EAAE,YAAqB;QAC5D,OAAO,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,OAAO,EAAE,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9E,CAAC;IAEM,kCAAkC,CAAC,OAAe;QACrD,OAAO,IAAI,CAAC,cAAc,CAAC,yBAAyB,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9E,CAAC;IAEM,6BAA6B,CAAC,OAAe;QAChD,OAAO,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7E,CAAC;IAED;;;;OAIG;IACI,mBAAmB,CAAC,KAAa;QACpC,OAAO,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACjE,CAAC;IAEM,sBAAsB,CAAC,EAAU;QACpC,OAAO,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACjE,CAAC;IAEM,yBAAyB,CAAC,KAAa;QAC1C,OAAO,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACvE,CAAC;IAEM,yBAAyB,CAAC,KAAa;QAC1C,OAAO,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACvE,CAAC;IAEM,+BAA+B,CAAC,WAAmB;QACtD,OAAO,IAAI,CAAC,cAAc,CAAC,0BAA0B,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACnF,CAAC;IAEM,+BAA+B,CAAC,KAAa;QAChD,OAAO,IAAI,CAAC,cAAc,CAAC,0BAA0B,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7E,CAAC;IAEM,0BAA0B,CAAC,MAAc;QAC5C,OAAO,IAAI,CAAC,cAAc,CAAC,4BAA4B,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAChF,CAAC;CACJ;AAjED,oCAiEC","file":"LivechatRead.js","sourcesContent":["import type { ILivechatRead } from '../../definition/accessors/ILivechatRead';\nimport type { IDepartment } from '../../definition/livechat';\nimport type { ILivechatRoom } from '../../definition/livechat/ILivechatRoom';\nimport type { IVisitor } from '../../definition/livechat/IVisitor';\nimport type { IMessage } from '../../definition/messages';\nimport type { LivechatBridge } from '../bridges/LivechatBridge';\n\nexport class LivechatRead implements ILivechatRead {\n    constructor(private readonly livechatBridge: LivechatBridge, private readonly appId: string) {}\n\n    /**\n     * @deprecated please use the `isOnlineAsync` method instead.\n     * In the next major, this method will be `async`\n     */\n    public isOnline(departmentId?: string): boolean {\n        console.warn(\"The `LivechatRead.isOnline` method is deprecated and won't behave as intended. Please use `LivechatRead.isOnlineAsync` instead\");\n\n        return this.livechatBridge.doIsOnline(departmentId, this.appId);\n    }\n\n    public isOnlineAsync(departmentId?: string): Promise<boolean> {\n        return this.livechatBridge.doIsOnlineAsync(departmentId, this.appId);\n    }\n\n    public getDepartmentsEnabledWithAgents(): Promise<Array<IDepartment>> {\n        return this.livechatBridge.doFindDepartmentsEnabledWithAgents(this.appId);\n    }\n\n    public getLivechatRooms(visitor: IVisitor, departmentId?: string): Promise<Array<ILivechatRoom>> {\n        return this.livechatBridge.doFindRooms(visitor, departmentId, this.appId);\n    }\n\n    public getLivechatTotalOpenRoomsByAgentId(agentId: string): Promise<number> {\n        return this.livechatBridge.doCountOpenRoomsByAgentId(agentId, this.appId);\n    }\n\n    public getLivechatOpenRoomsByAgentId(agentId: string): Promise<Array<ILivechatRoom>> {\n        return this.livechatBridge.doFindOpenRoomsByAgentId(agentId, this.appId);\n    }\n\n    /**\n     * @deprecated This method does not adhere to the conversion practices applied\n     * elsewhere in the Apps-Engine and will be removed in the next major version.\n     * Prefer the alternative methods to fetch visitors.\n     */\n    public getLivechatVisitors(query: object): Promise<Array<IVisitor>> {\n        return this.livechatBridge.doFindVisitors(query, this.appId);\n    }\n\n    public getLivechatVisitorById(id: string): Promise<IVisitor | undefined> {\n        return this.livechatBridge.doFindVisitorById(id, this.appId);\n    }\n\n    public getLivechatVisitorByEmail(email: string): Promise<IVisitor | undefined> {\n        return this.livechatBridge.doFindVisitorByEmail(email, this.appId);\n    }\n\n    public getLivechatVisitorByToken(token: string): Promise<IVisitor | undefined> {\n        return this.livechatBridge.doFindVisitorByToken(token, this.appId);\n    }\n\n    public getLivechatVisitorByPhoneNumber(phoneNumber: string): Promise<IVisitor | undefined> {\n        return this.livechatBridge.doFindVisitorByPhoneNumber(phoneNumber, this.appId);\n    }\n\n    public getLivechatDepartmentByIdOrName(value: string): Promise<IDepartment | undefined> {\n        return this.livechatBridge.doFindDepartmentByIdOrName(value, this.appId);\n    }\n\n    public _fetchLivechatRoomMessages(roomId: string): Promise<Array<IMessage>> {\n        return this.livechatBridge.do_fetchLivechatRoomMessages(this.appId, roomId);\n    }\n}\n"]}