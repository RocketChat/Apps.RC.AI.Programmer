{"version":3,"sources":["src/server/accessors/ServerSettingRead.ts"],"names":[],"mappings":";;;;;;;;;;;;AAIA,MAAa,iBAAiB;IAC1B,YAA6B,aAAkC,EAAmB,KAAa;QAAlE,kBAAa,GAAb,aAAa,CAAqB;QAAmB,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAE5F,UAAU,CAAC,EAAU;QACxB,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3D,CAAC;IAEY,YAAY,CAAC,EAAU;;YAChC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAElE,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,iEAAiE,EAAE,IAAI,CAAC,CAAC;aAC5F;YAED,IAAI,GAAG,CAAC,KAAK,KAAK,SAAS,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,EAAE;gBAC/C,OAAO,GAAG,CAAC,YAAY,CAAC;aAC3B;YAED,OAAO,GAAG,CAAC,KAAK,CAAC;QACrB,CAAC;KAAA;IAEM,MAAM;QACT,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,gDAAgD;IACpD,CAAC;IAEM,cAAc,CAAC,EAAU;QAC5B,OAAO,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC/D,CAAC;CACJ;AA7BD,8CA6BC","file":"ServerSettingRead.js","sourcesContent":["import type { ServerSettingBridge } from '../bridges/ServerSettingBridge';\nimport type { IServerSettingRead } from '../../definition/accessors';\nimport type { ISetting } from '../../definition/settings';\n\nexport class ServerSettingRead implements IServerSettingRead {\n    constructor(private readonly settingBridge: ServerSettingBridge, private readonly appId: string) {}\n\n    public getOneById(id: string): Promise<ISetting> {\n        return this.settingBridge.doGetOneById(id, this.appId);\n    }\n\n    public async getValueById(id: string): Promise<any> {\n        const set = await this.settingBridge.doGetOneById(id, this.appId);\n\n        if (typeof set === 'undefined') {\n            throw new Error(`No Server Setting found, or it is unaccessible, by the id of \"${id}\".`);\n        }\n\n        if (set.value === undefined || set.value === null) {\n            return set.packageValue;\n        }\n\n        return set.value;\n    }\n\n    public getAll(): Promise<IterableIterator<ISetting>> {\n        throw new Error('Method not implemented.');\n        // return this.settingBridge.getAll(this.appId);\n    }\n\n    public isReadableById(id: string): Promise<boolean> {\n        return this.settingBridge.doIsReadableById(id, this.appId);\n    }\n}\n"]}