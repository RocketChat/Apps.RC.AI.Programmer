{"version":3,"sources":["src/server/accessors/UserUpdater.ts"],"names":[],"mappings":";;;;;;;;;;;;AAKA,MAAa,WAAW;IACpB,YAA6B,OAAmB,EAAmB,KAAa;QAAnD,YAAO,GAAP,OAAO,CAAY;QAAmB,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAEvE,gBAAgB,CAAC,IAAW,EAAE,UAA+B;;YACtE,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACnF,CAAC;KAAA;IAEY,YAAY,CAAC,IAAW,EAAE,UAA+B,EAAE,MAA4B;;YAChG,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3F,CAAC;KAAA;IAEY,SAAS,CAAC,IAAW,EAAE,GAAiB;;YACjD,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5E,CAAC;KAAA;IAEY,kBAAkB,CAAC,IAAW,EAAE,YAAmC;;YAC5E,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,YAAY,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACrF,CAAC;KAAA;IAEY,UAAU,CAAC,MAAmB,EAAE,iBAA0B;;YACnE,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,iBAAiB,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5F,CAAC;KAAA;CACJ;AAtBD,kCAsBC","file":"UserUpdater.js","sourcesContent":["import type { IUserUpdater } from '../../definition/accessors/IUserUpdater';\nimport type { UserStatusConnection } from '../../definition/users';\nimport type { IUser } from '../../definition/users/IUser';\nimport type { AppBridges } from '../bridges';\n\nexport class UserUpdater implements IUserUpdater {\n    constructor(private readonly bridges: AppBridges, private readonly appId: string) {}\n\n    public async updateStatusText(user: IUser, statusText: IUser['statusText']) {\n        return this.bridges.getUserBridge().doUpdate(user, { statusText }, this.appId);\n    }\n\n    public async updateStatus(user: IUser, statusText: IUser['statusText'], status: UserStatusConnection) {\n        return this.bridges.getUserBridge().doUpdate(user, { statusText, status }, this.appId);\n    }\n\n    public async updateBio(user: IUser, bio: IUser['bio']) {\n        return this.bridges.getUserBridge().doUpdate(user, { bio }, this.appId);\n    }\n\n    public async updateCustomFields(user: IUser, customFields: IUser['customFields']) {\n        return this.bridges.getUserBridge().doUpdate(user, { customFields }, this.appId);\n    }\n\n    public async deactivate(userId: IUser['id'], confirmRelinquish: boolean) {\n        return this.bridges.getUserBridge().doDeactivate(userId, confirmRelinquish, this.appId);\n    }\n}\n"]}