{"version":3,"sources":["src/server/accessors/UIController.ts"],"names":[],"mappings":"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","file":"UIController.js","sourcesContent":["import type { IUIController } from '../../definition/accessors';\nimport type { IUIKitErrorInteractionParam, IUIKitInteractionParam, IUIKitSurfaceViewParam } from '../../definition/accessors/IUIController';\nimport { UIKitInteractionType, UIKitSurfaceType } from '../../definition/uikit';\nimport { formatContextualBarInteraction, formatErrorInteraction, formatModalInteraction } from '../../definition/uikit/UIKitInteractionPayloadFormatter';\nimport type { IUIKitContextualBarViewParam, IUIKitModalViewParam } from '../../definition/uikit/UIKitInteractionResponder';\nimport type { IUser } from '../../definition/users';\nimport type { AppBridges, UiInteractionBridge } from '../bridges';\nimport { UIHelper } from '../misc/UIHelper';\n\nexport class UIController implements IUIController {\n    private readonly uiInteractionBridge: UiInteractionBridge;\n\n    constructor(private readonly appId: string, bridges: AppBridges) {\n        this.uiInteractionBridge = bridges.getUiInteractionBridge();\n    }\n\n    /**\n     * @deprecated please prefer the `openSurfaceView` method\n     */\n    public openModalView(view: IUIKitModalViewParam, context: IUIKitInteractionParam, user: IUser) {\n        return this.openModal(view, context, user);\n    }\n\n    /**\n     * @deprecated please prefer the `updateSurfaceView` method\n     */\n    public updateModalView(view: IUIKitModalViewParam, context: IUIKitInteractionParam, user: IUser) {\n        return this.openModal(view, context, user, true);\n    }\n\n    /**\n     * @deprecated please prefer the `openSurfaceView` method\n     */\n    public openContextualBarView(view: IUIKitContextualBarViewParam, context: IUIKitInteractionParam, user: IUser) {\n        return this.openContextualBar(view, context, user);\n    }\n\n    /**\n     * @deprecated please prefer the `updateSurfaceView` method\n     */\n    public updateContextualBarView(view: IUIKitContextualBarViewParam, context: IUIKitInteractionParam, user: IUser) {\n        return this.openContextualBar(view, context, user, true);\n    }\n\n    public openSurfaceView(view: IUIKitSurfaceViewParam, context: IUIKitInteractionParam, user: IUser) {\n        const blocks = UIHelper.assignIds(view.blocks, this.appId);\n        const viewWithIds = { ...view, blocks };\n\n        switch (view.type) {\n            case UIKitSurfaceType.CONTEXTUAL_BAR:\n                return this.openContextualBar(viewWithIds, context, user);\n            case UIKitSurfaceType.MODAL:\n                return this.openModal(viewWithIds, context, user);\n        }\n    }\n\n    public updateSurfaceView(view: IUIKitSurfaceViewParam, context: IUIKitInteractionParam, user: IUser) {\n        const blocks = UIHelper.assignIds(view.blocks, this.appId);\n        const viewWithIds = { ...view, blocks };\n\n        switch (view.type) {\n            case UIKitSurfaceType.CONTEXTUAL_BAR:\n                return this.openContextualBar(viewWithIds, context, user, true);\n            case UIKitSurfaceType.MODAL:\n                return this.openModal(viewWithIds, context, user, true);\n        }\n    }\n\n    public setViewError(errorInteraction: IUIKitErrorInteractionParam, context: IUIKitInteractionParam, user: IUser) {\n        const interactionContext = {\n            ...context,\n            type: UIKitInteractionType.ERRORS,\n            appId: this.appId,\n        };\n\n        return this.uiInteractionBridge.doNotifyUser(user, formatErrorInteraction(errorInteraction, interactionContext), this.appId);\n    }\n\n    private openContextualBar(view: IUIKitContextualBarViewParam, context: IUIKitInteractionParam, user: IUser, isUpdate = false): Promise<void> {\n        let type = UIKitInteractionType.CONTEXTUAL_BAR_OPEN;\n        if (isUpdate) {\n            type = UIKitInteractionType.CONTEXTUAL_BAR_UPDATE;\n        }\n        const interactionContext = {\n            ...context,\n            type,\n            appId: this.appId,\n        };\n\n        return this.uiInteractionBridge.doNotifyUser(user, formatContextualBarInteraction(view, interactionContext), this.appId);\n    }\n\n    private openModal(view: IUIKitModalViewParam, context: IUIKitInteractionParam, user: IUser, isUpdate = false): Promise<void> {\n        let type = UIKitInteractionType.MODAL_OPEN;\n        if (isUpdate) {\n            type = UIKitInteractionType.MODAL_UPDATE;\n        }\n        const interactionContext = {\n            ...context,\n            type,\n            appId: this.appId,\n        };\n\n        return this.uiInteractionBridge.doNotifyUser(user, formatModalInteraction(view, interactionContext), this.appId);\n    }\n}\n"]}