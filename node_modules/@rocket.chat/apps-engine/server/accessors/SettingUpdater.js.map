{"version":3,"sources":["src/server/accessors/SettingUpdater.ts"],"names":[],"mappings":";;;;;;;;;;;;AAKA,MAAa,cAAc;IACvB,YAA6B,GAAe,EAAmB,OAA2B;QAA7D,QAAG,GAAH,GAAG,CAAY;QAAmB,YAAO,GAAP,OAAO,CAAoB;IAAG,CAAC;IAEjF,WAAW,CAAC,EAAkB,EAAE,KAAwB;;YACjE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;gBACzC,OAAO;aACV;YAED,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;YAEjE,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,kCACvC,OAAO,KACV,SAAS,EAAE,IAAI,IAAI,EAAE,EACrB,KAAK,IACP,CAAC;QACP,CAAC;KAAA;CACJ;AAhBD,wCAgBC","file":"SettingUpdater.js","sourcesContent":["import type { ISettingUpdater } from '../../definition/accessors/ISettingUpdater';\nimport type { ISetting } from '../../definition/settings';\nimport type { AppSettingsManager } from '../managers';\nimport type { ProxiedApp } from '../ProxiedApp';\n\nexport class SettingUpdater implements ISettingUpdater {\n    constructor(private readonly app: ProxiedApp, private readonly manager: AppSettingsManager) {}\n\n    public async updateValue(id: ISetting['id'], value: ISetting['value']) {\n        if (!this.app.getStorageItem().settings[id]) {\n            return;\n        }\n\n        const setting = this.manager.getAppSetting(this.app.getID(), id);\n\n        this.manager.updateAppSetting(this.app.getID(), {\n            ...setting,\n            updatedAt: new Date(),\n            value,\n        });\n    }\n}\n"]}