{"version":3,"sources":["src/server/accessors/UploadRead.ts"],"names":[],"mappings":";;;;;;;;;;;;AAIA,MAAa,UAAU;IACnB,YAA6B,YAA0B,EAAmB,KAAa;QAA1D,iBAAY,GAAZ,YAAY,CAAc;QAAmB,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAEpF,OAAO,CAAC,EAAU;QACrB,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACvD,CAAC;IAEM,SAAS,CAAC,MAAe;QAC5B,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7D,CAAC;IAEY,aAAa,CAAC,EAAU;;YACjC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAEjE,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7D,CAAC;KAAA;CACJ;AAhBD,gCAgBC","file":"UploadRead.js","sourcesContent":["import type { IUploadRead } from '../../definition/accessors';\nimport type { IUpload } from '../../definition/uploads';\nimport type { UploadBridge } from '../bridges/UploadBridge';\n\nexport class UploadRead implements IUploadRead {\n    constructor(private readonly uploadBridge: UploadBridge, private readonly appId: string) {}\n\n    public getById(id: string): Promise<IUpload> {\n        return this.uploadBridge.doGetById(id, this.appId);\n    }\n\n    public getBuffer(upload: IUpload): Promise<Buffer> {\n        return this.uploadBridge.doGetBuffer(upload, this.appId);\n    }\n\n    public async getBufferById(id: string): Promise<Buffer> {\n        const upload = await this.uploadBridge.doGetById(id, this.appId);\n\n        return this.uploadBridge.doGetBuffer(upload, this.appId);\n    }\n}\n"]}