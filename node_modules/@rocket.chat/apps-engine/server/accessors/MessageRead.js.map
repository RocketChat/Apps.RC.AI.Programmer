{"version":3,"sources":["src/server/accessors/MessageRead.ts"],"names":[],"mappings":";;;;;;;;;;;;AAMA,MAAa,WAAW;IACpB,YAAoB,aAA4B,EAAU,KAAa;QAAnD,kBAAa,GAAb,aAAa,CAAe;QAAU,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAEpE,OAAO,CAAC,EAAU;QACrB,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACxD,CAAC;IAEY,aAAa,CAAC,SAAiB;;YACxC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAEtE,IAAI,CAAC,GAAG,EAAE;gBACN,OAAO,SAAS,CAAC;aACpB;YAED,OAAO,GAAG,CAAC,MAAM,CAAC;QACtB,CAAC;KAAA;IAEY,OAAO,CAAC,SAAiB;;YAClC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAEtE,IAAI,CAAC,GAAG,EAAE;gBACN,OAAO,SAAS,CAAC;aACpB;YAED,OAAO,GAAG,CAAC,IAAI,CAAC;QACpB,CAAC;KAAA;CACJ;AA1BD,kCA0BC","file":"MessageRead.js","sourcesContent":["import type { MessageBridge } from '../bridges/MessageBridge';\nimport type { IMessageRead } from '../../definition/accessors';\nimport type { IMessage } from '../../definition/messages';\nimport type { IRoom } from '../../definition/rooms';\nimport type { IUser } from '../../definition/users';\n\nexport class MessageRead implements IMessageRead {\n    constructor(private messageBridge: MessageBridge, private appId: string) {}\n\n    public getById(id: string): Promise<IMessage> {\n        return this.messageBridge.doGetById(id, this.appId);\n    }\n\n    public async getSenderUser(messageId: string): Promise<IUser> {\n        const msg = await this.messageBridge.doGetById(messageId, this.appId);\n\n        if (!msg) {\n            return undefined;\n        }\n\n        return msg.sender;\n    }\n\n    public async getRoom(messageId: string): Promise<IRoom> {\n        const msg = await this.messageBridge.doGetById(messageId, this.appId);\n\n        if (!msg) {\n            return undefined;\n        }\n\n        return msg.room;\n    }\n}\n"]}