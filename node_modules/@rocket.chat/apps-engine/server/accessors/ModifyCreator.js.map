{"version":3,"sources":["src/server/accessors/ModifyCreator.ts"],"names":[],"mappings":"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","file":"ModifyCreator.js","sourcesContent":["import type {\n    IDiscussionBuilder,\n    ILivechatCreator,\n    ILivechatMessageBuilder,\n    IMessageBuilder,\n    IModifyCreator,\n    IRoomBuilder,\n    IUploadCreator,\n    IUserBuilder,\n    IVideoConferenceBuilder,\n} from '../../definition/accessors';\nimport type { ILivechatMessage } from '../../definition/livechat/ILivechatMessage';\nimport type { IMessage } from '../../definition/messages';\nimport { RocketChatAssociationModel } from '../../definition/metadata';\nimport type { IRoom } from '../../definition/rooms';\nimport { RoomType } from '../../definition/rooms';\nimport { BlockBuilder } from '../../definition/uikit';\nimport type { AppVideoConference } from '../../definition/videoConferences';\nimport type { AppBridges } from '../bridges';\nimport { UIHelper } from '../misc/UIHelper';\nimport type { IBotUser } from '../../definition/users/IBotUser';\nimport { UserType } from '../../definition/users/UserType';\nimport { DiscussionBuilder } from './DiscussionBuilder';\nimport { LivechatCreator } from './LivechatCreator';\nimport { LivechatMessageBuilder } from './LivechatMessageBuilder';\nimport { MessageBuilder } from './MessageBuilder';\nimport { RoomBuilder } from './RoomBuilder';\nimport { UploadCreator } from './UploadCreator';\nimport { UserBuilder } from './UserBuilder';\nimport { VideoConferenceBuilder } from './VideoConferenceBuilder';\n\nexport class ModifyCreator implements IModifyCreator {\n    private livechatCreator: LivechatCreator;\n\n    private uploadCreator: UploadCreator;\n\n    constructor(private readonly bridges: AppBridges, private readonly appId: string) {\n        this.livechatCreator = new LivechatCreator(bridges, appId);\n        this.uploadCreator = new UploadCreator(bridges, appId);\n    }\n\n    public getLivechatCreator(): ILivechatCreator {\n        return this.livechatCreator;\n    }\n\n    public getUploadCreator(): IUploadCreator {\n        return this.uploadCreator;\n    }\n\n    /**\n     * @deprecated please prefer the rocket.chat/ui-kit components\n     */\n    public getBlockBuilder(): BlockBuilder {\n        return new BlockBuilder(this.appId);\n    }\n\n    public startMessage(data?: IMessage): IMessageBuilder {\n        if (data) {\n            delete data.id;\n        }\n\n        return new MessageBuilder(data);\n    }\n\n    public startLivechatMessage(data?: ILivechatMessage): ILivechatMessageBuilder {\n        if (data) {\n            delete data.id;\n        }\n\n        return new LivechatMessageBuilder(data);\n    }\n\n    public startRoom(data?: IRoom): IRoomBuilder {\n        if (data) {\n            delete data.id;\n        }\n\n        return new RoomBuilder(data);\n    }\n\n    public startDiscussion(data?: Partial<IRoom>): IDiscussionBuilder {\n        if (data) {\n            delete data.id;\n        }\n\n        return new DiscussionBuilder(data);\n    }\n\n    public startVideoConference(data?: Partial<AppVideoConference>): IVideoConferenceBuilder {\n        return new VideoConferenceBuilder(data);\n    }\n\n    public startBotUser(data?: Partial<IBotUser>): IUserBuilder {\n        if (data) {\n            delete data.id;\n\n            const { roles } = data;\n\n            if (roles && roles.length) {\n                const hasRole = roles.map((role) => role.toLocaleLowerCase()).some((role) => role === 'admin' || role === 'owner' || role === 'moderator');\n\n                if (hasRole) {\n                    throw new Error('Invalid role assigned to the user. Should not be admin, owner or moderator.');\n                }\n            }\n\n            if (!data.type) {\n                data.type = UserType.BOT;\n            }\n        }\n\n        return new UserBuilder(data);\n    }\n\n    public finish(\n        builder: IMessageBuilder | ILivechatMessageBuilder | IRoomBuilder | IDiscussionBuilder | IVideoConferenceBuilder | IUserBuilder,\n    ): Promise<string> {\n        switch (builder.kind) {\n            case RocketChatAssociationModel.MESSAGE:\n                return this._finishMessage(builder);\n            case RocketChatAssociationModel.LIVECHAT_MESSAGE:\n                return this._finishLivechatMessage(builder);\n            case RocketChatAssociationModel.ROOM:\n                return this._finishRoom(builder);\n            case RocketChatAssociationModel.DISCUSSION:\n                return this._finishDiscussion(builder as IDiscussionBuilder);\n            case RocketChatAssociationModel.VIDEO_CONFERENCE:\n                return this._finishVideoConference(builder);\n            case RocketChatAssociationModel.USER:\n                return this._finishUser(builder);\n            default:\n                throw new Error('Invalid builder passed to the ModifyCreator.finish function.');\n        }\n    }\n\n    private async _finishMessage(builder: IMessageBuilder): Promise<string> {\n        const result = builder.getMessage();\n        delete result.id;\n\n        if (!result.sender || !result.sender.id) {\n            const appUser = await this.bridges.getUserBridge().doGetAppUser(this.appId);\n\n            if (!appUser) {\n                throw new Error('Invalid sender assigned to the message.');\n            }\n\n            result.sender = appUser;\n        }\n\n        if (result.blocks?.length) {\n            result.blocks = UIHelper.assignIds(result.blocks, this.appId);\n        }\n\n        return this.bridges.getMessageBridge().doCreate(result, this.appId);\n    }\n\n    private _finishLivechatMessage(builder: ILivechatMessageBuilder): Promise<string> {\n        if (builder.getSender() && !builder.getVisitor()) {\n            return this._finishMessage(builder.getMessageBuilder());\n        }\n\n        const result = builder.getMessage();\n        delete result.id;\n\n        if (!result.token && (!result.visitor || !result.visitor.token)) {\n            throw new Error('Invalid visitor sending the message');\n        }\n\n        result.token = result.visitor ? result.visitor.token : result.token;\n\n        return this.bridges.getLivechatBridge().doCreateMessage(result, this.appId);\n    }\n\n    private _finishRoom(builder: IRoomBuilder): Promise<string> {\n        const result = builder.getRoom();\n        delete result.id;\n\n        if (!result.type) {\n            throw new Error('Invalid type assigned to the room.');\n        }\n\n        if (result.type !== RoomType.LIVE_CHAT) {\n            if (!result.creator || !result.creator.id) {\n                throw new Error('Invalid creator assigned to the room.');\n            }\n        }\n\n        if (result.type !== RoomType.DIRECT_MESSAGE) {\n            if (result.type !== RoomType.LIVE_CHAT) {\n                if (!result.slugifiedName || !result.slugifiedName.trim()) {\n                    throw new Error('Invalid slugifiedName assigned to the room.');\n                }\n            }\n\n            if (!result.displayName || !result.displayName.trim()) {\n                throw new Error('Invalid displayName assigned to the room.');\n            }\n        }\n\n        return this.bridges.getRoomBridge().doCreate(result, builder.getMembersToBeAddedUsernames(), this.appId);\n    }\n\n    private _finishDiscussion(builder: IDiscussionBuilder): Promise<string> {\n        const room = builder.getRoom();\n        delete room.id;\n\n        if (!room.creator || !room.creator.id) {\n            throw new Error('Invalid creator assigned to the discussion.');\n        }\n\n        if (!room.slugifiedName || !room.slugifiedName.trim()) {\n            throw new Error('Invalid slugifiedName assigned to the discussion.');\n        }\n\n        if (!room.displayName || !room.displayName.trim()) {\n            throw new Error('Invalid displayName assigned to the discussion.');\n        }\n\n        if (!room.parentRoom || !room.parentRoom.id) {\n            throw new Error('Invalid parentRoom assigned to the discussion.');\n        }\n\n        return this.bridges\n            .getRoomBridge()\n            .doCreateDiscussion(room, builder.getParentMessage(), builder.getReply(), builder.getMembersToBeAddedUsernames(), this.appId);\n    }\n\n    private _finishVideoConference(builder: IVideoConferenceBuilder): Promise<string> {\n        const videoConference = builder.getVideoConference();\n\n        if (!videoConference.createdBy) {\n            throw new Error('Invalid creator assigned to the video conference.');\n        }\n\n        if (!videoConference.providerName?.trim()) {\n            throw new Error('Invalid provider name assigned to the video conference.');\n        }\n\n        if (!videoConference.rid) {\n            throw new Error('Invalid roomId assigned to the video conference.');\n        }\n\n        return this.bridges.getVideoConferenceBridge().doCreate(videoConference, this.appId);\n    }\n\n    private _finishUser(builder: IUserBuilder): Promise<string> {\n        const user = builder.getUser();\n\n        return this.bridges.getUserBridge().doCreate(user, this.appId);\n    }\n}\n"]}