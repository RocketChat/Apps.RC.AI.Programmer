{"version":3,"sources":["src/server/accessors/LivechatMessageBuilder.ts"],"names":[],"mappings":"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","file":"LivechatMessageBuilder.js","sourcesContent":["import type { ILivechatMessageBuilder, IMessageBuilder } from '../../definition/accessors';\nimport type { ILivechatMessage } from '../../definition/livechat/ILivechatMessage';\nimport type { IVisitor } from '../../definition/livechat/IVisitor';\nimport type { IMessage, IMessageAttachment } from '../../definition/messages';\nimport { RocketChatAssociationModel } from '../../definition/metadata';\nimport type { IRoom } from '../../definition/rooms';\nimport { RoomType } from '../../definition/rooms';\nimport type { IUser } from '../../definition/users';\nimport { MessageBuilder } from './MessageBuilder';\n\nexport class LivechatMessageBuilder implements ILivechatMessageBuilder {\n    public kind: RocketChatAssociationModel.LIVECHAT_MESSAGE;\n\n    private msg: ILivechatMessage;\n\n    constructor(message?: ILivechatMessage) {\n        this.kind = RocketChatAssociationModel.LIVECHAT_MESSAGE;\n        this.msg = message || ({} as ILivechatMessage);\n    }\n\n    public setData(data: ILivechatMessage): ILivechatMessageBuilder {\n        delete data.id;\n        this.msg = data;\n\n        return this;\n    }\n\n    public setRoom(room: IRoom): ILivechatMessageBuilder {\n        this.msg.room = room;\n        return this;\n    }\n\n    public getRoom(): IRoom {\n        return this.msg.room;\n    }\n\n    public setSender(sender: IUser): ILivechatMessageBuilder {\n        this.msg.sender = sender;\n        delete this.msg.visitor;\n\n        return this;\n    }\n\n    public getSender(): IUser {\n        return this.msg.sender;\n    }\n\n    public setText(text: string): ILivechatMessageBuilder {\n        this.msg.text = text;\n        return this;\n    }\n\n    public getText(): string {\n        return this.msg.text;\n    }\n\n    public setEmojiAvatar(emoji: string): ILivechatMessageBuilder {\n        this.msg.emoji = emoji;\n        return this;\n    }\n\n    public getEmojiAvatar(): string {\n        return this.msg.emoji;\n    }\n\n    public setAvatarUrl(avatarUrl: string): ILivechatMessageBuilder {\n        this.msg.avatarUrl = avatarUrl;\n        return this;\n    }\n\n    public getAvatarUrl(): string {\n        return this.msg.avatarUrl;\n    }\n\n    public setUsernameAlias(alias: string): ILivechatMessageBuilder {\n        this.msg.alias = alias;\n        return this;\n    }\n\n    public getUsernameAlias(): string {\n        return this.msg.alias;\n    }\n\n    public addAttachment(attachment: IMessageAttachment): ILivechatMessageBuilder {\n        if (!this.msg.attachments) {\n            this.msg.attachments = [];\n        }\n\n        this.msg.attachments.push(attachment);\n        return this;\n    }\n\n    public setAttachments(attachments: Array<IMessageAttachment>): ILivechatMessageBuilder {\n        this.msg.attachments = attachments;\n        return this;\n    }\n\n    public getAttachments(): Array<IMessageAttachment> {\n        return this.msg.attachments;\n    }\n\n    public replaceAttachment(position: number, attachment: IMessageAttachment): ILivechatMessageBuilder {\n        if (!this.msg.attachments) {\n            this.msg.attachments = [];\n        }\n\n        if (!this.msg.attachments[position]) {\n            throw new Error(`No attachment found at the index of \"${position}\" to replace.`);\n        }\n\n        this.msg.attachments[position] = attachment;\n        return this;\n    }\n\n    public removeAttachment(position: number): ILivechatMessageBuilder {\n        if (!this.msg.attachments) {\n            this.msg.attachments = [];\n        }\n\n        if (!this.msg.attachments[position]) {\n            throw new Error(`No attachment found at the index of \"${position}\" to remove.`);\n        }\n\n        this.msg.attachments.splice(position, 1);\n\n        return this;\n    }\n\n    public setEditor(user: IUser): ILivechatMessageBuilder {\n        this.msg.editor = user;\n        return this;\n    }\n\n    public getEditor(): IUser {\n        return this.msg.editor;\n    }\n\n    public setGroupable(groupable: boolean): ILivechatMessageBuilder {\n        this.msg.groupable = groupable;\n        return this;\n    }\n\n    public getGroupable(): boolean {\n        return this.msg.groupable;\n    }\n\n    public setParseUrls(parseUrls: boolean): ILivechatMessageBuilder {\n        this.msg.parseUrls = parseUrls;\n        return this;\n    }\n\n    public getParseUrls(): boolean {\n        return this.msg.parseUrls;\n    }\n\n    public setToken(token: string): ILivechatMessageBuilder {\n        this.msg.token = token;\n        return this;\n    }\n\n    public getToken(): string {\n        return this.msg.token;\n    }\n\n    public setVisitor(visitor: IVisitor): ILivechatMessageBuilder {\n        this.msg.visitor = visitor;\n        delete this.msg.sender;\n\n        return this;\n    }\n\n    public getVisitor(): IVisitor {\n        return this.msg.visitor;\n    }\n\n    public getMessage(): ILivechatMessage {\n        if (!this.msg.room) {\n            throw new Error('The \"room\" property is required.');\n        }\n\n        if (this.msg.room.type !== RoomType.LIVE_CHAT) {\n            throw new Error('The room is not a Livechat room');\n        }\n\n        return this.msg;\n    }\n\n    public getMessageBuilder(): IMessageBuilder {\n        return new MessageBuilder(this.msg as IMessage);\n    }\n}\n"]}