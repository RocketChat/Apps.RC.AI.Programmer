{"version":3,"sources":["src/server/accessors/UserRead.ts"],"names":[],"mappings":";;;AAIA,MAAa,QAAQ;IACjB,YAAoB,UAAsB,EAAU,KAAa;QAA7C,eAAU,GAAV,UAAU,CAAY;QAAU,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAE9D,OAAO,CAAC,EAAU;QACrB,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACrD,CAAC;IAEM,aAAa,CAAC,QAAgB;QACjC,OAAO,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACjE,CAAC;IAEM,UAAU,CAAC,QAAgB,IAAI,CAAC,KAAK;QACxC,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC/C,CAAC;IAEM,yBAAyB,CAAC,GAAW;QACxC,OAAO,IAAI,CAAC,UAAU,CAAC,2BAA2B,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACxE,CAAC;CACJ;AAlBD,4BAkBC","file":"UserRead.js","sourcesContent":["import type { IUserRead } from '../../definition/accessors';\nimport type { IUser } from '../../definition/users';\nimport type { UserBridge } from '../bridges/UserBridge';\n\nexport class UserRead implements IUserRead {\n    constructor(private userBridge: UserBridge, private appId: string) {}\n\n    public getById(id: string): Promise<IUser> {\n        return this.userBridge.doGetById(id, this.appId);\n    }\n\n    public getByUsername(username: string): Promise<IUser> {\n        return this.userBridge.doGetByUsername(username, this.appId);\n    }\n\n    public getAppUser(appId: string = this.appId): Promise<IUser | undefined> {\n        return this.userBridge.doGetAppUser(appId);\n    }\n\n    public getUserUnreadMessageCount(uid: string): Promise<number> {\n        return this.userBridge.doGetUserUnreadMessageCount(uid, this.appId);\n    }\n}\n"]}