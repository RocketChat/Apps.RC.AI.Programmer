{"version":3,"sources":["src/server/accessors/SettingRead.ts"],"names":[],"mappings":";;;;;;;;;;;;AAIA,MAAa,WAAW;IACpB,YAA6B,GAAe;QAAf,QAAG,GAAH,GAAG,CAAY;IAAG,CAAC;IAEzC,OAAO,CAAC,EAAU;QACrB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IACnE,CAAC;IAEY,YAAY,CAAC,EAAU;;YAChC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAEnC,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;aACtD;YAED,IAAI,GAAG,CAAC,KAAK,KAAK,SAAS,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,EAAE;gBAC/C,OAAO,GAAG,CAAC,YAAY,CAAC;aAC3B;YAED,OAAO,GAAG,CAAC,KAAK,CAAC;QACrB,CAAC;KAAA;CACJ;AApBD,kCAoBC","file":"SettingRead.js","sourcesContent":["import type { ProxiedApp } from '../ProxiedApp';\nimport type { ISettingRead } from '../../definition/accessors';\nimport type { ISetting } from '../../definition/settings';\n\nexport class SettingRead implements ISettingRead {\n    constructor(private readonly app: ProxiedApp) {}\n\n    public getById(id: string): Promise<ISetting> {\n        return Promise.resolve(this.app.getStorageItem().settings[id]);\n    }\n\n    public async getValueById(id: string): Promise<any> {\n        const set = await this.getById(id);\n\n        if (typeof set === 'undefined') {\n            throw new Error(`Setting \"${id}\" does not exist.`);\n        }\n\n        if (set.value === undefined || set.value === null) {\n            return set.packageValue;\n        }\n\n        return set.value;\n    }\n}\n"]}