{"version":3,"sources":["src/server/accessors/ServerSettingUpdater.ts"],"names":[],"mappings":";;;;;;;;;;;;AAIA,MAAa,oBAAoB;IAC7B,YAA6B,OAAmB,EAAmB,KAAa;QAAnD,YAAO,GAAP,OAAO,CAAY;QAAmB,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAEvE,SAAS,CAAC,OAAiB;;YACpC,MAAM,IAAI,CAAC,OAAO,CAAC,sBAAsB,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACjF,CAAC;KAAA;IAEY,cAAc,CAAC,EAAkB,EAAE,KAAK,GAAG,CAAC;;YACrD,MAAM,IAAI,CAAC,OAAO,CAAC,sBAAsB,EAAE,CAAC,gBAAgB,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACxF,CAAC;KAAA;CACJ;AAVD,oDAUC","file":"ServerSettingUpdater.js","sourcesContent":["import type { IServerSettingUpdater } from '../../definition/accessors';\nimport type { ISetting } from '../../definition/settings';\nimport type { AppBridges } from '../bridges';\n\nexport class ServerSettingUpdater implements IServerSettingUpdater {\n    constructor(private readonly bridges: AppBridges, private readonly appId: string) {}\n\n    public async updateOne(setting: ISetting): Promise<void> {\n        await this.bridges.getServerSettingBridge().doUpdateOne(setting, this.appId);\n    }\n\n    public async incrementValue(id: ISetting['id'], value = 1): Promise<void> {\n        await this.bridges.getServerSettingBridge().doIncrementValue(id, value, this.appId);\n    }\n}\n"]}