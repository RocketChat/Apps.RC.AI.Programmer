{"version":3,"sources":["src/server/runtime/AppsEngineVM2Runtime.ts"],"names":[],"mappings":"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","file":"AppsEngineVM2Runtime.js","sourcesContent":["import * as path from 'path';\nimport * as timers from 'timers';\n\nimport type { NodeVMOptions } from 'vm2';\nimport { NodeVM } from 'vm2';\n\nimport type { App } from '../../definition/App';\nimport type { IAppsEngineRuntimeOptions } from './AppsEngineRuntime';\nimport { APPS_ENGINE_RUNTIME_DEFAULT_TIMEOUT, AppsEngineRuntime, getFilenameForApp } from './AppsEngineRuntime';\n\nexport class AppsEngineVM2Runtime extends AppsEngineRuntime {\n    public static defaultNodeVMOptions: NodeVMOptions = {\n        console: 'inherit',\n        // wrapper: 'none',\n        timeout: APPS_ENGINE_RUNTIME_DEFAULT_TIMEOUT,\n        // we don't need any compiling happening\n        compiler: (code: string, filename: string) => code,\n        // We keep require inaccessible here as we expect it to be provided\n        // require: false,\n        sandbox: {\n            Buffer,\n            ...timers,\n        },\n    };\n\n    public static async runCode(code: string, sandbox?: Record<string, any>, options?: IAppsEngineRuntimeOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            process.nextTick(() => {\n                try {\n                    resolve(this.runCodeSync(code, sandbox, options));\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n\n    public static runCodeSync(code: string, sandbox?: Record<string, any>, options?: IAppsEngineRuntimeOptions): any {\n        const vmOptions = {\n            ...AppsEngineVM2Runtime.defaultNodeVMOptions,\n            timeout: options?.timeout,\n            sandbox: {\n                ...AppsEngineVM2Runtime.defaultNodeVMOptions.sandbox,\n                ...(sandbox || {}),\n            },\n        };\n\n        const resolve = sandbox && sandbox.require;\n        if (resolve instanceof Function) {\n            vmOptions.require = {\n                external: ['@rocket.chat/apps-engine', 'uuid'],\n                builtin: ['path', 'url', 'crypto', 'buffer', 'stream', 'net', 'http', 'https', 'zlib', 'util', 'punycode', 'os', 'querystring'],\n                resolve: (moduleName, p) => {\n                    return path.resolve(`${p}/npm/node_modules/${moduleName}`);\n                },\n                context: 'sandbox',\n            };\n\n            delete sandbox.require;\n        }\n        const vm = new NodeVM(vmOptions);\n\n        const app = vm.run(code, {\n            filename: options?.filename || 'app.js',\n            require: (mod: string) => resolve(mod, vm.require.bind(vm)),\n        } as any);\n        // Get first exported object, vm2 does not return the last value when it's an assignment as intern vm\n        // so we use the first exported value as the class.\n        return options?.returnAllExports ? app : app && app[Object.keys(app)[0]];\n    }\n\n    private vm: NodeVM;\n\n    constructor(private readonly app: App, customRequire: (mod: string) => any) {\n        super(app, customRequire);\n\n        this.vm = new NodeVM({\n            ...AppsEngineVM2Runtime.defaultNodeVMOptions,\n            require: { customRequire },\n        });\n    }\n\n    public async runInSandbox(code: string, sandbox?: Record<string, any>, options?: IAppsEngineRuntimeOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            process.nextTick(async () => {\n                try {\n                    sandbox ??= {};\n\n                    this.vm.setGlobals(sandbox);\n\n                    const result = await this.vm.run(code, {\n                        filename: getFilenameForApp(options?.filename || this.app.getName()),\n                    });\n\n                    // Clean up the sandbox after the code has run\n                    this.vm.setGlobals(\n                        Object.keys(sandbox).reduce((acc, key) => {\n                            acc[key] = undefined;\n\n                            return acc;\n                        }, {} as typeof sandbox),\n                    );\n\n                    resolve(result);\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n}\n"]}