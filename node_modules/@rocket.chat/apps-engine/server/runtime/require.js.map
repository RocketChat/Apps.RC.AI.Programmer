{"version":3,"sources":["src/server/runtime/require.ts"],"names":[],"mappings":";;;AAAA,6BAA6B;AAE7B,wBAA+B;AAC/B,iDAAkF;AAElF;;;GAGG;AACH,SAAgB,uCAAuC,CAAC,UAAkB;IACtE,OAAO,GAAG,IAAI;SACT,SAAS,CAAC,UAAU,CAAC;SACrB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;SACvB,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC;AACjC,CAAC;AALD,0FAKC;AAED,SAAgB,+BAA+B,CAAC,UAAkB;IAC9D,OAAO,GAAG,IAAI;SACT,SAAS,CAAC,UAAU,CAAC;SACrB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;SACvB,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC;AACjC,CAAC;AALD,0EAKC;AAED,SAAgB,4BAA4B,CAAC,UAAkB;IAC3D,OAAO,UAAU,IAAI,gCAAsB,CAAC;AAChD,CAAC;AAFD,oEAEC;AAED,SAAgB,kBAAkB,CAAC,KAA8B,EAAE,KAAa,EAAE,WAAW,GAAG,GAAG;IAC/F,OAAO,SAAS,SAAS,CAAC,GAAW,EAAE,QAAa;QAChD,4DAA4D;QAC5D,IAAI,GAAG,CAAC,UAAU,CAAC,kCAAkC,CAAC,EAAE;YACpD,IAAI,QAAQ,EAAE;gBACV,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;aACxB;YACD,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC1B,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,kCAAkC,EAAE,mBAAmB,CAAC,CAAC;YAC3E,OAAO,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;SAClC;QAED,IAAI,GAAG,CAAC,UAAU,CAAC,sCAAsC,CAAC,EAAE;YACxD,IAAI,QAAQ,EAAE;gBACV,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;aACxB;YACD,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC1B,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,sCAAsC,EAAE,mBAAmB,CAAC,CAAC;YAC/E,OAAO,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;SAClC;QAED,IAAI,4BAA4B,CAAC,GAAG,CAAC,EAAE;YACnC,+FAA+F;YAC/F,OAAO,IAAA,6BAAmB,EAAC,GAAG,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;SACpD;QAED,IAAI,WAAW,KAAK,GAAG,EAAE;YACrB,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;SACrC;QAED,MAAM,iBAAiB,GAAG,+BAA+B,CAAC,GAAG,CAAC,CAAC;QAC/D,MAAM,cAAc,GAAG,uCAAuC,CAAC,GAAG,CAAC,CAAC;QAEpE,MAAM,QAAQ,GAAG,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAI,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,cAAc,CAAC,IAAI,SAAS,CAAC;QAE3H,IAAI,CAAC,QAAQ,EAAE;YACX,OAAO;SACV;QAED,MAAM,OAAO,GAAG,IAAA,aAAU,GAAE,CAAC;QAE7B,kCAAkC;QAClC,OAAO,OAAO,CAAC,WAAW,CACtB,KAAK,CAAC,QAAQ,CAAC,EACf;YACI,OAAO,EAAE,kBAAkB,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC;SAC1E,EACD;YACI,gBAAgB,EAAE,IAAI;YACtB,QAAQ;SACX,CACJ,CAAC;IACN,CAAC,CAAC;AACN,CAAC;AArDD,gDAqDC","file":"require.js","sourcesContent":["import * as path from 'path';\n\nimport { getRuntime } from '.';\nimport { AllowedInternalModules, requireNativeModule } from '../compiler/modules';\n\n/**\n * Keeps compatibility with apps compiled and stored in the database\n * with previous Apps-Engine versions\n */\nexport function transformFallbackModuleForCustomRequire(moduleName: string): string {\n    return `${path\n        .normalize(moduleName)\n        .replace(/\\.\\.?\\//g, '')\n        .replace(/^\\//, '')}.ts`;\n}\n\nexport function transformModuleForCustomRequire(moduleName: string): string {\n    return `${path\n        .normalize(moduleName)\n        .replace(/\\.\\.?\\//g, '')\n        .replace(/^\\//, '')}.js`;\n}\n\nexport function allowedInternalModuleRequire(moduleName: string): moduleName is AllowedInternalModules {\n    return moduleName in AllowedInternalModules;\n}\n\nexport function buildCustomRequire(files: { [s: string]: string }, appId: string, currentPath = '.'): (mod: string, require: any) => {} {\n    return function _requirer(mod: string, requirer: any) {\n        // Keep compatibility with apps importing apps-ts-definition\n        if (mod.startsWith('@rocket.chat/apps-ts-definition/')) {\n            if (requirer) {\n                return requirer(mod);\n            }\n            mod = path.normalize(mod);\n            mod = mod.replace('@rocket.chat/apps-ts-definition/', '../../definition/');\n            return globalThis.require(mod);\n        }\n\n        if (mod.startsWith('@rocket.chat/apps-engine/definition/')) {\n            if (requirer) {\n                return requirer(mod);\n            }\n            mod = path.normalize(mod);\n            mod = mod.replace('@rocket.chat/apps-engine/definition/', '../../definition/');\n            return globalThis.require(mod);\n        }\n\n        if (allowedInternalModuleRequire(mod)) {\n            // TODO: Need to use the vm2 require in this function and evaluate the necessity of the proxies\n            return requireNativeModule(mod, appId, requirer);\n        }\n\n        if (currentPath !== '.') {\n            mod = path.join(currentPath, mod);\n        }\n\n        const transformedModule = transformModuleForCustomRequire(mod);\n        const fallbackModule = transformFallbackModuleForCustomRequire(mod);\n\n        const filename = (files[transformedModule] && transformedModule) || (files[fallbackModule] && fallbackModule) || undefined;\n\n        if (!filename) {\n            return;\n        }\n\n        const Runtime = getRuntime();\n\n        // TODO: specify correct file name\n        return Runtime.runCodeSync(\n            files[filename],\n            {\n                require: buildCustomRequire(files, appId, `${path.dirname(filename)}/`),\n            },\n            {\n                returnAllExports: true,\n                filename,\n            },\n        );\n    };\n}\n"]}