{"version":3,"sources":["src/server/bridges/LivechatBridge.ts"],"names":[],"mappings":";;;;;;;;;;;;AAIA,2EAAwE;AACxE,2EAAwE;AACxE,kEAA+D;AAC/D,6CAA0C;AAc1C,MAAsB,cAAe,SAAQ,uBAAU;IAC5C,UAAU,CAAC,YAAqB,EAAE,KAAc;QACnD,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,iBAAiB,CAAC,EAAE;YAClD,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;SAC7C;IACL,CAAC;IAEY,eAAe,CAAC,YAAqB,EAAE,KAAc;;YAC9D,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,iBAAiB,CAAC,EAAE;gBAClD,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;aAClD;QACL,CAAC;KAAA;IAEY,eAAe,CAAC,OAAyB,EAAE,KAAa;;YACjE,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,kBAAkB,CAAC,EAAE;gBACpD,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aAC7C;QACL,CAAC;KAAA;IAEY,gBAAgB,CAAC,SAAiB,EAAE,KAAa;;YAC1D,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,kBAAkB,CAAC,EAAE;gBACnD,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;aAChD;QACL,CAAC;KAAA;IAEY,eAAe,CAAC,OAAyB,EAAE,KAAa;;YACjE,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,kBAAkB,CAAC,EAAE;gBACpD,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aAC7C;QACL,CAAC;KAAA;IAEY,eAAe,CAAC,OAAiB,EAAE,KAAa;;YACzD,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,kBAAkB,CAAC,EAAE;gBACpD,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aAC7C;QACL,CAAC;KAAA;IAEY,cAAc,CAAC,KAAa,EAAE,KAAa;;YACpD,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,kBAAkB,CAAC,EAAE;gBACnD,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;aAC1C;QACL,CAAC;KAAA;IAEY,iBAAiB,CAAC,EAAU,EAAE,KAAa;;YACpD,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,kBAAkB,CAAC,EAAE;gBACnD,OAAO,IAAI,CAAC,eAAe,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;aAC1C;QACL,CAAC;KAAA;IAEY,oBAAoB,CAAC,KAAa,EAAE,KAAa;;YAC1D,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,kBAAkB,CAAC,EAAE;gBACnD,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;aAChD;QACL,CAAC;KAAA;IAEY,oBAAoB,CAAC,KAAa,EAAE,KAAa;;YAC1D,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,kBAAkB,CAAC,EAAE;gBACnD,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;aAChD;QACL,CAAC;KAAA;IAEY,0BAA0B,CAAC,WAAmB,EAAE,KAAa;;YACtE,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,kBAAkB,CAAC,EAAE;gBACnD,OAAO,IAAI,CAAC,wBAAwB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;aAC5D;QACL,CAAC;KAAA;IAEY,iBAAiB,CAAC,OAAiB,EAAE,YAAmC,EAAE,KAAa;;YAChG,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,kBAAkB,CAAC,EAAE;gBACpD,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;aAC7D;QACL,CAAC;KAAA;IAEY,YAAY,CAAC,OAAiB,EAAE,KAAY,EAAE,KAAa,EAAE,WAA8B;;YACpG,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,eAAe,CAAC,EAAE;gBACjD,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;aAC9D;QACL,CAAC;KAAA;IAEY,WAAW,CAAC,IAAmB,EAAE,OAAe,EAAE,MAAyB,EAAE,KAAa;;YACnG,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,eAAe,CAAC,EAAE;gBACjD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;aACvD;QACL,CAAC;KAAA;IAEY,yBAAyB,CAAC,OAAe,EAAE,KAAa;;YACjE,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,eAAe,CAAC,EAAE;gBAChD,OAAO,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aACvD;QACL,CAAC;KAAA;IAEY,wBAAwB,CAAC,OAAe,EAAE,KAAa;;YAChE,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,eAAe,CAAC,EAAE;gBAChD,OAAO,IAAI,CAAC,sBAAsB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aACtD;QACL,CAAC;KAAA;IAEY,WAAW,CAAC,OAAiB,EAAE,YAA2B,EAAE,KAAa;;YAClF,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,eAAe,CAAC,EAAE;gBAChD,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;aACvD;QACL,CAAC;KAAA;IAEY,0BAA0B,CAAC,KAAa,EAAE,KAAa;;YAChE,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,qBAAqB,CAAC,IAAI,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,qBAAqB,CAAC,EAAE;gBAClH,OAAO,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;aACtD;QACL,CAAC;KAAA;IAEY,kCAAkC,CAAC,KAAa;;YACzD,IAAI,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,qBAAqB,CAAC,EAAE;gBAC1D,OAAO,IAAI,CAAC,gCAAgC,CAAC,KAAK,CAAC,CAAC;aACvD;QACL,CAAC;KAAA;IAEY,4BAA4B,CAAC,KAAa,EAAE,MAAc;;YACnE,IAAI,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,kBAAkB,CAAC,EAAE;gBACvD,OAAO,IAAI,CAAC,0BAA0B,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;aACzD;QACL,CAAC;KAAA;IAEY,iBAAiB,CAAC,IAAkF,EAAE,KAAa;;YAC5H,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,wBAAwB,CAAC,EAAE;gBAC1D,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aAC5C;QACL,CAAC;KAAA;IAqDO,iBAAiB,CAAC,KAAa,EAAE,KAA8B;QACnE,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE;YACvE,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC;SACnD,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;IAEO,kBAAkB,CAAC,KAAa,EAAE,KAA+B;QACrE,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAAE;YACxE,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC;SACpD,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;IAEO,qBAAqB,CAAC,KAAa,EAAE,KAAkC;QAC3E,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,EAAE;YAC3E,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC;SACvD,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AA9ND,wCA8NC","file":"LivechatBridge.js","sourcesContent":["import type { IExtraRoomParams } from '../../definition/accessors/ILivechatCreator';\nimport type { IDepartment, ILivechatMessage, ILivechatRoom, ILivechatTransferData, IVisitor } from '../../definition/livechat';\nimport type { IMessage } from '../../definition/messages';\nimport type { IUser } from '../../definition/users';\nimport { PermissionDeniedError } from '../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../managers/AppPermissionManager';\nimport { AppPermissions } from '../permissions/AppPermissions';\nimport { BaseBridge } from './BaseBridge';\n\ntype LivechatReadPermissions = keyof Pick<\n    typeof AppPermissions,\n    'livechat-department' | 'livechat-message' | 'livechat-room' | 'livechat-status' | 'livechat-visitor'\n>;\n\ntype LivechatWritePermissions = keyof Pick<\n    typeof AppPermissions,\n    'livechat-custom-fields' | 'livechat-department' | 'livechat-message' | 'livechat-room' | 'livechat-visitor'\n>;\n\ntype LivechatMultiplePermissions = keyof Pick<typeof AppPermissions, 'livechat-department' | 'livechat-message'>;\n\nexport abstract class LivechatBridge extends BaseBridge {\n    public doIsOnline(departmentId?: string, appId?: string): boolean {\n        if (this.hasReadPermission(appId, 'livechat-status')) {\n            return this.isOnline(departmentId, appId);\n        }\n    }\n\n    public async doIsOnlineAsync(departmentId?: string, appId?: string): Promise<boolean> {\n        if (this.hasReadPermission(appId, 'livechat-status')) {\n            return this.isOnlineAsync(departmentId, appId);\n        }\n    }\n\n    public async doCreateMessage(message: ILivechatMessage, appId: string): Promise<string> {\n        if (this.hasWritePermission(appId, 'livechat-message')) {\n            return this.createMessage(message, appId);\n        }\n    }\n\n    public async doGetMessageById(messageId: string, appId: string): Promise<ILivechatMessage> {\n        if (this.hasReadPermission(appId, 'livechat-message')) {\n            return this.getMessageById(messageId, appId);\n        }\n    }\n\n    public async doUpdateMessage(message: ILivechatMessage, appId: string): Promise<void> {\n        if (this.hasWritePermission(appId, 'livechat-message')) {\n            return this.updateMessage(message, appId);\n        }\n    }\n\n    public async doCreateVisitor(visitor: IVisitor, appId: string): Promise<string> {\n        if (this.hasWritePermission(appId, 'livechat-visitor')) {\n            return this.createVisitor(visitor, appId);\n        }\n    }\n\n    public async doFindVisitors(query: object, appId: string): Promise<Array<IVisitor>> {\n        if (this.hasReadPermission(appId, 'livechat-visitor')) {\n            return this.findVisitors(query, appId);\n        }\n    }\n\n    public async doFindVisitorById(id: string, appId: string): Promise<IVisitor | undefined> {\n        if (this.hasReadPermission(appId, 'livechat-visitor')) {\n            return this.findVisitorById(id, appId);\n        }\n    }\n\n    public async doFindVisitorByEmail(email: string, appId: string): Promise<IVisitor | undefined> {\n        if (this.hasReadPermission(appId, 'livechat-visitor')) {\n            return this.findVisitorByEmail(email, appId);\n        }\n    }\n\n    public async doFindVisitorByToken(token: string, appId: string): Promise<IVisitor | undefined> {\n        if (this.hasReadPermission(appId, 'livechat-visitor')) {\n            return this.findVisitorByToken(token, appId);\n        }\n    }\n\n    public async doFindVisitorByPhoneNumber(phoneNumber: string, appId: string): Promise<IVisitor | undefined> {\n        if (this.hasReadPermission(appId, 'livechat-visitor')) {\n            return this.findVisitorByPhoneNumber(phoneNumber, appId);\n        }\n    }\n\n    public async doTransferVisitor(visitor: IVisitor, transferData: ILivechatTransferData, appId: string): Promise<boolean> {\n        if (this.hasWritePermission(appId, 'livechat-visitor')) {\n            return this.transferVisitor(visitor, transferData, appId);\n        }\n    }\n\n    public async doCreateRoom(visitor: IVisitor, agent: IUser, appId: string, extraParams?: IExtraRoomParams): Promise<ILivechatRoom> {\n        if (this.hasWritePermission(appId, 'livechat-room')) {\n            return this.createRoom(visitor, agent, appId, extraParams);\n        }\n    }\n\n    public async doCloseRoom(room: ILivechatRoom, comment: string, closer: IUser | undefined, appId: string): Promise<boolean> {\n        if (this.hasWritePermission(appId, 'livechat-room')) {\n            return this.closeRoom(room, comment, closer, appId);\n        }\n    }\n\n    public async doCountOpenRoomsByAgentId(agentId: string, appId: string): Promise<number> {\n        if (this.hasReadPermission(appId, 'livechat-room')) {\n            return this.countOpenRoomsByAgentId(agentId, appId);\n        }\n    }\n\n    public async doFindOpenRoomsByAgentId(agentId: string, appId: string): Promise<Array<ILivechatRoom>> {\n        if (this.hasReadPermission(appId, 'livechat-room')) {\n            return this.findOpenRoomsByAgentId(agentId, appId);\n        }\n    }\n\n    public async doFindRooms(visitor: IVisitor, departmentId: string | null, appId: string): Promise<Array<ILivechatRoom>> {\n        if (this.hasReadPermission(appId, 'livechat-room')) {\n            return this.findRooms(visitor, departmentId, appId);\n        }\n    }\n\n    public async doFindDepartmentByIdOrName(value: string, appId: string): Promise<IDepartment | undefined> {\n        if (this.hasReadPermission(appId, 'livechat-department') || this.hasMultiplePermission(appId, 'livechat-department')) {\n            return this.findDepartmentByIdOrName(value, appId);\n        }\n    }\n\n    public async doFindDepartmentsEnabledWithAgents(appId: string): Promise<Array<IDepartment>> {\n        if (this.hasMultiplePermission(appId, 'livechat-department')) {\n            return this.findDepartmentsEnabledWithAgents(appId);\n        }\n    }\n\n    public async do_fetchLivechatRoomMessages(appId: string, roomId: string): Promise<Array<IMessage>> {\n        if (this.hasMultiplePermission(appId, 'livechat-message')) {\n            return this._fetchLivechatRoomMessages(appId, roomId);\n        }\n    }\n\n    public async doSetCustomFields(data: { token: IVisitor['token']; key: string; value: string; overwrite: boolean }, appId: string): Promise<number> {\n        if (this.hasWritePermission(appId, 'livechat-custom-fields')) {\n            return this.setCustomFields(data, appId);\n        }\n    }\n\n    /**\n     * @deprecated please use the `isOnlineAsync` method instead.\n     * In the next major, this method will be `async`\n     */\n    protected abstract isOnline(departmentId?: string, appId?: string): boolean;\n\n    protected abstract isOnlineAsync(departmentId?: string, appId?: string): Promise<boolean>;\n\n    protected abstract createMessage(message: ILivechatMessage, appId: string): Promise<string>;\n\n    protected abstract getMessageById(messageId: string, appId: string): Promise<ILivechatMessage>;\n\n    protected abstract updateMessage(message: ILivechatMessage, appId: string): Promise<void>;\n\n    protected abstract createVisitor(visitor: IVisitor, appId: string): Promise<string>;\n\n    /**\n     * @deprecated This method does not adhere to the conversion practices applied\n     * elsewhere in the Apps-Engine and will be removed in the next major version.\n     * Prefer other methods that fetch visitors.\n     */\n    protected abstract findVisitors(query: object, appId: string): Promise<Array<IVisitor>>;\n\n    protected abstract findVisitorById(id: string, appId: string): Promise<IVisitor | undefined>;\n\n    protected abstract findVisitorByEmail(email: string, appId: string): Promise<IVisitor | undefined>;\n\n    protected abstract findVisitorByToken(token: string, appId: string): Promise<IVisitor | undefined>;\n\n    protected abstract findVisitorByPhoneNumber(phoneNumber: string, appId: string): Promise<IVisitor | undefined>;\n\n    protected abstract transferVisitor(visitor: IVisitor, transferData: ILivechatTransferData, appId: string): Promise<boolean>;\n\n    protected abstract createRoom(visitor: IVisitor, agent: IUser, appId: string, extraParams?: IExtraRoomParams): Promise<ILivechatRoom>;\n\n    protected abstract closeRoom(room: ILivechatRoom, comment: string, closer: IUser | undefined, appId: string): Promise<boolean>;\n\n    protected abstract countOpenRoomsByAgentId(agentId: string, appId: string): Promise<number>;\n\n    protected abstract findOpenRoomsByAgentId(agentId: string, appId: string): Promise<Array<ILivechatRoom>>;\n\n    protected abstract findRooms(visitor: IVisitor, departmentId: string | null, appId: string): Promise<Array<ILivechatRoom>>;\n\n    protected abstract findDepartmentByIdOrName(value: string, appId: string): Promise<IDepartment | undefined>;\n\n    protected abstract findDepartmentsEnabledWithAgents(appId: string): Promise<Array<IDepartment>>;\n\n    protected abstract _fetchLivechatRoomMessages(appId: string, roomId: string): Promise<Array<IMessage>>;\n\n    protected abstract setCustomFields(data: { token: IVisitor['token']; key: string; value: string; overwrite: boolean }, appId: string): Promise<number>;\n\n    private hasReadPermission(appId: string, scope: LivechatReadPermissions): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions[scope].read)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions[scope].read],\n            }),\n        );\n\n        return false;\n    }\n\n    private hasWritePermission(appId: string, scope: LivechatWritePermissions): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions[scope].write)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions[scope].write],\n            }),\n        );\n\n        return false;\n    }\n\n    private hasMultiplePermission(appId: string, scope: LivechatMultiplePermissions): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions[scope].multiple)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions[scope].multiple],\n            }),\n        );\n\n        return false;\n    }\n}\n"]}