{"version":3,"sources":["src/server/bridges/EnvironmentalVariableBridge.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2EAAwE;AACxE,2EAAwE;AACxE,kEAA+D;AAC/D,6CAA0C;AAE1C,MAAsB,2BAA4B,SAAQ,uBAAU;IACnD,gBAAgB,CAAC,UAAkB,EAAE,KAAa;;YAC3D,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;aACjD;QACL,CAAC;KAAA;IAEY,YAAY,CAAC,UAAkB,EAAE,KAAa;;YACvD,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;aAC7C;QACL,CAAC;KAAA;IAEY,OAAO,CAAC,UAAkB,EAAE,KAAa;;YAClD,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;aACxC;QACL,CAAC;KAAA;IAQO,iBAAiB,CAAC,KAAa;QACnC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACpE,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,GAAG,CAAC,IAAI,CAAC;SAChD,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AAvCD,kEAuCC","file":"EnvironmentalVariableBridge.js","sourcesContent":["import { PermissionDeniedError } from '../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../managers/AppPermissionManager';\nimport { AppPermissions } from '../permissions/AppPermissions';\nimport { BaseBridge } from './BaseBridge';\n\nexport abstract class EnvironmentalVariableBridge extends BaseBridge {\n    public async doGetValueByName(envVarName: string, appId: string): Promise<string | undefined> {\n        if (this.hasReadPermission(appId)) {\n            return this.getValueByName(envVarName, appId);\n        }\n    }\n\n    public async doIsReadable(envVarName: string, appId: string): Promise<boolean> {\n        if (this.hasReadPermission(appId)) {\n            return this.isReadable(envVarName, appId);\n        }\n    }\n\n    public async doIsSet(envVarName: string, appId: string): Promise<boolean> {\n        if (this.hasReadPermission(appId)) {\n            return this.isSet(envVarName, appId);\n        }\n    }\n\n    protected abstract getValueByName(envVarName: string, appId: string): Promise<string | undefined>;\n\n    protected abstract isReadable(envVarName: string, appId: string): Promise<boolean>;\n\n    protected abstract isSet(envVarName: string, appId: string): Promise<boolean>;\n\n    private hasReadPermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.env.read)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.env.read],\n            }),\n        );\n\n        return false;\n    }\n}\n"]}