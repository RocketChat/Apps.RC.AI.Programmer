{"version":3,"sources":["src/server/bridges/ApiBridge.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2EAAwE;AAExE,2EAAwE;AACxE,kEAA+D;AAC/D,6CAA0C;AAE1C,MAAsB,SAAU,SAAQ,uBAAU;IACjC,aAAa,CAAC,GAAW,EAAE,KAAa;;YACjD,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aACvC;QACL,CAAC;KAAA;IAEY,gBAAgB,CAAC,KAAa;;YACvC,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;aACrC;QACL,CAAC;KAAA;IAiBO,oBAAoB,CAAC,KAAa;QACtC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACxE,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,IAAI,CAAC,OAAO,CAAC;SACpD,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AA1CD,8BA0CC","file":"ApiBridge.js","sourcesContent":["import { PermissionDeniedError } from '../errors/PermissionDeniedError';\nimport type { AppApi } from '../managers/AppApi';\nimport { AppPermissionManager } from '../managers/AppPermissionManager';\nimport { AppPermissions } from '../permissions/AppPermissions';\nimport { BaseBridge } from './BaseBridge';\n\nexport abstract class ApiBridge extends BaseBridge {\n    public async doRegisterApi(api: AppApi, appId: string): Promise<void> {\n        if (this.hasDefaultPermission(appId)) {\n            return this.registerApi(api, appId);\n        }\n    }\n\n    public async doUnregisterApis(appId: string): Promise<void> {\n        if (this.hasDefaultPermission(appId)) {\n            return this.unregisterApis(appId);\n        }\n    }\n\n    /**\n     * Registers an api with the system which is being bridged.\n     *\n     * @param api the api to register\n     * @param appId the id of the app calling this\n     */\n    protected abstract registerApi(api: AppApi, appId: string): Promise<void>;\n\n    /**\n     * Unregisters all provided api's of an app from the bridged system.\n     *\n     * @param appId the id of the app calling this\n     */\n    protected abstract unregisterApis(appId: string): Promise<void>;\n\n    private hasDefaultPermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.apis.default)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.apis.default],\n            }),\n        );\n\n        return false;\n    }\n}\n"]}