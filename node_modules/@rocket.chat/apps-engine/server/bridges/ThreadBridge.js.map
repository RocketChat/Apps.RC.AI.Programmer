{"version":3,"sources":["src/server/bridges/ThreadBridge.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,2EAAwE;AACxE,2EAAwE;AACxE,kEAA+D;AAC/D,6CAA0C;AAM1C,MAAsB,YAAa,SAAQ,uBAAU;IACpC,SAAS,CAAC,SAAiB,EAAE,KAAa;;YACnD,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;aACzC;QACL,CAAC;KAAA;IAIO,iBAAiB,CAAC,KAAa;QACnC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxE,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,OAAO,CAAC,IAAI,CAAC;SACpD,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AAvBD,oCAuBC","file":"ThreadBridge.js","sourcesContent":["import type { ITypingOptions } from '../../definition/accessors/INotifier';\nimport type { IMessage } from '../../definition/messages';\nimport { PermissionDeniedError } from '../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../managers/AppPermissionManager';\nimport { AppPermissions } from '../permissions/AppPermissions';\nimport { BaseBridge } from './BaseBridge';\n\nexport interface ITypingDescriptor extends ITypingOptions {\n    isTyping: boolean;\n}\n\nexport abstract class ThreadBridge extends BaseBridge {\n    public async doGetById(messageId: string, appId: string): Promise<Array<IMessage>> {\n        if (this.hasReadPermission(appId)) {\n            return this.getById(messageId, appId);\n        }\n    }\n\n    protected abstract getById(messageId: string, appId: string): Promise<Array<IMessage>>;\n\n    private hasReadPermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.threads.read)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.threads.read],\n            }),\n        );\n\n        return false;\n    }\n}\n"]}