{"version":3,"sources":["src/server/bridges/ModerationBridge.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,2EAAwE;AACxE,2EAAwE;AACxE,kEAA+D;AAC/D,6CAA0C;AAE1C,MAAsB,gBAAiB,SAAQ,uBAAU;IACxC,QAAQ,CAAC,SAAyB,EAAE,WAAmB,EAAE,MAAc,EAAE,KAAa;;YAC/F,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,WAAW,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;aAC7D;QACL,CAAC;KAAA;IAEY,2BAA2B,CAAC,SAAyB,EAAE,MAAc,EAAE,MAAc,EAAE,KAAa;;YAC7G,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,yBAAyB,CAAC,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;aAC3E;QACL,CAAC;KAAA;IAEY,wBAAwB,CAAC,MAAmB,EAAE,MAAc,EAAE,MAAc,EAAE,KAAa;;YACpG,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;aACrE;QACL,CAAC;KAAA;IAQO,kBAAkB,CAAC,KAAa;QACpC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YAC5E,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,UAAU,CAAC,KAAK,CAAC;SACxD,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AAvCD,4CAuCC","file":"ModerationBridge.js","sourcesContent":["import type { IMessage } from '../../definition/messages';\nimport type { IUser } from '../../definition/users';\nimport { PermissionDeniedError } from '../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../managers/AppPermissionManager';\nimport { AppPermissions } from '../permissions/AppPermissions';\nimport { BaseBridge } from './BaseBridge';\n\nexport abstract class ModerationBridge extends BaseBridge {\n    public async doReport(messageId: IMessage['id'], description: string, userId: string, appId: string): Promise<void> {\n        if (this.hasWritePermission(appId)) {\n            return this.report(messageId, description, userId, appId);\n        }\n    }\n\n    public async doDismissReportsByMessageId(messageId: IMessage['id'], reason: string, action: string, appId: string): Promise<void> {\n        if (this.hasWritePermission(appId)) {\n            return this.dismissReportsByMessageId(messageId, reason, action, appId);\n        }\n    }\n\n    public async doDismissReportsByUserId(userId: IUser['id'], reason: string, action: string, appId: string): Promise<void> {\n        if (this.hasWritePermission(appId)) {\n            return this.dismissReportsByUserId(userId, reason, action, appId);\n        }\n    }\n\n    protected abstract report(messageId: string, description: string, userId: string, appId: string): Promise<void>;\n\n    protected abstract dismissReportsByMessageId(messageId: string, reason: string, action: string, appId: string): Promise<void>;\n\n    protected abstract dismissReportsByUserId(userId: string, reason: string, action: string, appId: string): Promise<void>;\n\n    private hasWritePermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.moderation.write)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.moderation.write],\n            }),\n        );\n\n        return false;\n    }\n}\n"]}