{"version":3,"sources":["src/server/bridges/PersistenceBridge.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,2EAAwE;AACxE,2EAAwE;AACxE,kEAA+D;AAC/D,6CAA0C;AAE1C,MAAsB,iBAAkB,SAAQ,uBAAU;IACzC,OAAO,CAAC,KAAa;;YAC9B,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aAC5B;QACL,CAAC;KAAA;IAEY,QAAQ,CAAC,IAAY,EAAE,KAAa;;YAC7C,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aACnC;QACL,CAAC;KAAA;IAEY,wBAAwB,CAAC,IAAY,EAAE,YAAgD,EAAE,KAAa;;YAC/G,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;aACjE;QACL,CAAC;KAAA;IAEY,UAAU,CAAC,EAAU,EAAE,KAAa;;YAC7C,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;aACnC;QACL,CAAC;KAAA;IAEY,oBAAoB,CAAC,YAAgD,EAAE,KAAa;;YAC7F,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;aACvD;QACL,CAAC;KAAA;IAEY,QAAQ,CAAC,EAAU,EAAE,KAAa;;YAC3C,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;aACjC;QACL,CAAC;KAAA;IAEY,sBAAsB,CAAC,YAAgD,EAAE,KAAa;;YAC/F,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,oBAAoB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;aACzD;QACL,CAAC;KAAA;IAEY,QAAQ,CAAC,EAAU,EAAE,IAAY,EAAE,MAAe,EAAE,KAAa;;YAC1E,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;aAC/C;QACL,CAAC;KAAA;IAEY,sBAAsB,CAAC,YAAgD,EAAE,IAAY,EAAE,MAAe,EAAE,KAAa;;YAC9H,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,oBAAoB,CAAC,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;aACvE;QACL,CAAC;KAAA;IAuFO,oBAAoB,CAAC,KAAa;QACtC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE;YAC/E,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,WAAW,CAAC,OAAO,CAAC;SAC3D,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AA1JD,8CA0JC","file":"PersistenceBridge.js","sourcesContent":["import type { RocketChatAssociationRecord } from '../../definition/metadata';\nimport { PermissionDeniedError } from '../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../managers/AppPermissionManager';\nimport { AppPermissions } from '../permissions/AppPermissions';\nimport { BaseBridge } from './BaseBridge';\n\nexport abstract class PersistenceBridge extends BaseBridge {\n    public async doPurge(appId: string): Promise<void> {\n        if (this.hasDefaultPermission(appId)) {\n            return this.purge(appId);\n        }\n    }\n\n    public async doCreate(data: object, appId: string): Promise<string> {\n        if (this.hasDefaultPermission(appId)) {\n            return this.create(data, appId);\n        }\n    }\n\n    public async doCreateWithAssociations(data: object, associations: Array<RocketChatAssociationRecord>, appId: string): Promise<string> {\n        if (this.hasDefaultPermission(appId)) {\n            return this.createWithAssociations(data, associations, appId);\n        }\n    }\n\n    public async doReadById(id: string, appId: string): Promise<object> {\n        if (this.hasDefaultPermission(appId)) {\n            return this.readById(id, appId);\n        }\n    }\n\n    public async doReadByAssociations(associations: Array<RocketChatAssociationRecord>, appId: string): Promise<Array<object>> {\n        if (this.hasDefaultPermission(appId)) {\n            return this.readByAssociations(associations, appId);\n        }\n    }\n\n    public async doRemove(id: string, appId: string): Promise<object | undefined> {\n        if (this.hasDefaultPermission(appId)) {\n            return this.remove(id, appId);\n        }\n    }\n\n    public async doRemoveByAssociations(associations: Array<RocketChatAssociationRecord>, appId: string): Promise<Array<object> | undefined> {\n        if (this.hasDefaultPermission(appId)) {\n            return this.removeByAssociations(associations, appId);\n        }\n    }\n\n    public async doUpdate(id: string, data: object, upsert: boolean, appId: string): Promise<string> {\n        if (this.hasDefaultPermission(appId)) {\n            return this.update(id, data, upsert, appId);\n        }\n    }\n\n    public async doUpdateByAssociations(associations: Array<RocketChatAssociationRecord>, data: object, upsert: boolean, appId: string): Promise<string> {\n        if (this.hasDefaultPermission(appId)) {\n            return this.updateByAssociations(associations, data, upsert, appId);\n        }\n    }\n\n    /**\n     * Purges the App's persistant storage data from the persistent storage.\n     *\n     * @argument appId the id of the app's data to remove\n     */\n    protected abstract purge(appId: string): Promise<void>;\n\n    /**\n     * Creates a new persistant record with the provided data attached.\n     *\n     * @argument data the data to store in persistent storage\n     * @argument appId the id of the app which is storing the data\n     * @returns the id of the stored record\n     */\n    protected abstract create(data: object, appId: string): Promise<string>;\n\n    /**\n     * Creates a new record in the App's persistent storage with the data being\n     * associated with at least one Rocket.Chat record.\n     *\n     * @argument data the data to store in the persistent storage\n     * @argument associations the associations records this data is associated with\n     * @argument appId the id of the app which is storing the data\n     * @returns the id of the stored record\n     */\n    protected abstract createWithAssociations(data: object, associations: Array<RocketChatAssociationRecord>, appId: string): Promise<string>;\n\n    /**\n     * Retrieves from the persistent storage the record by the id provided.\n     *\n     * @argument id the record id to read\n     * @argument appId the id of the app calling this\n     * @returns the data stored in the persistent storage, or undefined\n     */\n    protected abstract readById(id: string, appId: string): Promise<object>;\n\n    /**\n     * Retrieves the data which is associated with the provided records.\n     *\n     * @argument associations the association records to query about\n     * @argument appId the id of the app calling this\n     * @returns an array of records if they exist, an empty array otherwise\n     */\n    protected abstract readByAssociations(associations: Array<RocketChatAssociationRecord>, appId: string): Promise<Array<object>>;\n\n    /**\n     * Removes the record which matches the provided id.\n     *\n     * @argument id the id of the record\n     * @argument appId the id of the app calling this\n     * @returns the data being removed\n     */\n    protected abstract remove(id: string, appId: string): Promise<object | undefined>;\n\n    /**\n     * Removes any data which has been associated with the provided records.\n     *\n     * @argument associations the associations which to remove records\n     * @argument appId the id of the app calling this\n     * @returns the data of the removed records\n     */\n    protected abstract removeByAssociations(associations: Array<RocketChatAssociationRecord>, appId: string): Promise<Array<object> | undefined>;\n\n    /**\n     * Updates the record in the database, with the option of creating a new one if it doesn't exist.\n     *\n     * @argument id the id of the record to update\n     * @argument data the updated data to set in the record\n     * @argument upsert whether to create if the id doesn't exist\n     * @argument appId the id of the app calling this\n     * @returns the id, whether the new one or the existing one\n     */\n    protected abstract update(id: string, data: object, upsert: boolean, appId: string): Promise<string>;\n\n    /**\n     * Updates the record in the database, with the option of creating a new one if it doesn't exist.\n     *\n     * @argument associations the association records to update\n     * @argument data the updated data to set in the record\n     * @argument upsert whether to create if the id doesn't exist\n     * @argument appId the id of the app calling this\n     * @returns the id, whether the new one or the existing one\n     */\n    protected abstract updateByAssociations(associations: Array<RocketChatAssociationRecord>, data: object, upsert: boolean, appId: string): Promise<string>;\n\n    private hasDefaultPermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.persistence.default)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.persistence.default],\n            }),\n        );\n\n        return false;\n    }\n}\n"]}