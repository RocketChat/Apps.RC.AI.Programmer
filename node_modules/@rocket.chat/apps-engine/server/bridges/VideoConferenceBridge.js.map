{"version":3,"sources":["src/server/bridges/VideoConferenceBridge.ts"],"names":[],"mappings":";;;;;;;;;;;;AAGA,2EAAwE;AACxE,2EAAwE;AACxE,kEAA+D;AAC/D,6CAA0C;AAE1C,MAAsB,qBAAsB,SAAQ,uBAAU;IAC7C,SAAS,CAAC,MAAc,EAAE,KAAa;;YAChD,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;aACtC;QACL,CAAC;KAAA;IAEY,QAAQ,CAAC,IAAwB,EAAE,KAAa;;YACzD,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aACnC;QACL,CAAC;KAAA;IAEY,QAAQ,CAAC,IAAqB,EAAE,KAAa;;YACtD,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aACnC;QACL,CAAC;KAAA;IAEY,kBAAkB,CAAC,IAAwB,EAAE,KAAa;;YACnE,IAAI,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,EAAE;gBACnC,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aAC7C;QACL,CAAC;KAAA;IAEY,oBAAoB,CAAC,IAAwB,EAAE,KAAa;;YACrE,IAAI,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,EAAE;gBACnC,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aAC/C;QACL,CAAC;KAAA;IAYO,kBAAkB,CAAC,KAAa;QACpC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;YACjF,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,eAAe,CAAC,KAAK,CAAC;SAC7D,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;IAEO,iBAAiB,CAAC,KAAa;QACnC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;YAChF,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,eAAe,CAAC,IAAI,CAAC;SAC5D,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;IAEO,qBAAqB,CAAC,KAAa;QACvC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE;YACpF,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,eAAe,CAAC,QAAQ,CAAC;SAChE,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AArFD,sDAqFC","file":"VideoConferenceBridge.js","sourcesContent":["import type { AppVideoConference } from '../../definition/videoConferences/AppVideoConference';\nimport type { VideoConference } from '../../definition/videoConferences/IVideoConference';\nimport type { IVideoConfProvider } from '../../definition/videoConfProviders';\nimport { PermissionDeniedError } from '../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../managers/AppPermissionManager';\nimport { AppPermissions } from '../permissions/AppPermissions';\nimport { BaseBridge } from './BaseBridge';\n\nexport abstract class VideoConferenceBridge extends BaseBridge {\n    public async doGetById(callId: string, appId: string): Promise<VideoConference> {\n        if (this.hasReadPermission(appId)) {\n            return this.getById(callId, appId);\n        }\n    }\n\n    public async doCreate(call: AppVideoConference, appId: string): Promise<string> {\n        if (this.hasWritePermission(appId)) {\n            return this.create(call, appId);\n        }\n    }\n\n    public async doUpdate(call: VideoConference, appId: string): Promise<void> {\n        if (this.hasWritePermission(appId)) {\n            return this.update(call, appId);\n        }\n    }\n\n    public async doRegisterProvider(info: IVideoConfProvider, appId: string): Promise<void> {\n        if (this.hasProviderPermission(appId)) {\n            return this.registerProvider(info, appId);\n        }\n    }\n\n    public async doUnRegisterProvider(info: IVideoConfProvider, appId: string): Promise<void> {\n        if (this.hasProviderPermission(appId)) {\n            return this.unRegisterProvider(info, appId);\n        }\n    }\n\n    protected abstract create(call: AppVideoConference, appId: string): Promise<string>;\n\n    protected abstract getById(callId: string, appId: string): Promise<VideoConference>;\n\n    protected abstract update(call: VideoConference, appId: string): Promise<void>;\n\n    protected abstract registerProvider(info: IVideoConfProvider, appId: string): Promise<void>;\n\n    protected abstract unRegisterProvider(info: IVideoConfProvider, appId: string): Promise<void>;\n\n    private hasWritePermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.videoConference.write)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.videoConference.write],\n            }),\n        );\n\n        return false;\n    }\n\n    private hasReadPermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.videoConference.read)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.videoConference.read],\n            }),\n        );\n\n        return false;\n    }\n\n    private hasProviderPermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.videoConference.provider)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.videoConference.provider],\n            }),\n        );\n\n        return false;\n    }\n}\n"]}