{"version":3,"sources":["src/server/bridges/UploadBridge.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,2EAAwE;AACxE,2EAAwE;AACxE,kEAA+D;AAC/D,6CAA0C;AAE1C,MAAsB,YAAa,SAAQ,uBAAU;IACpC,SAAS,CAAC,EAAU,EAAE,KAAa;;YAC5C,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;aAClC;QACL,CAAC;KAAA;IAEY,WAAW,CAAC,MAAe,EAAE,KAAa;;YACnD,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;aACxC;QACL,CAAC;KAAA;IAEY,cAAc,CAAC,OAAuB,EAAE,MAAc,EAAE,KAAa;;YAC9E,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;aACpD;QACL,CAAC;KAAA;IAQO,iBAAiB,CAAC,KAAa;QACnC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YACvE,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,MAAM,CAAC,IAAI,CAAC;SACnD,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;IAEO,kBAAkB,CAAC,KAAa;QACpC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACxE,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,MAAM,CAAC,KAAK,CAAC;SACpD,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AAtDD,oCAsDC","file":"UploadBridge.js","sourcesContent":["import type { IUpload } from '../../definition/uploads';\nimport type { IUploadDetails } from '../../definition/uploads/IUploadDetails';\nimport { PermissionDeniedError } from '../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../managers/AppPermissionManager';\nimport { AppPermissions } from '../permissions/AppPermissions';\nimport { BaseBridge } from './BaseBridge';\n\nexport abstract class UploadBridge extends BaseBridge {\n    public async doGetById(id: string, appId: string): Promise<IUpload> {\n        if (this.hasReadPermission(appId)) {\n            return this.getById(id, appId);\n        }\n    }\n\n    public async doGetBuffer(upload: IUpload, appId: string): Promise<Buffer> {\n        if (this.hasReadPermission(appId)) {\n            return this.getBuffer(upload, appId);\n        }\n    }\n\n    public async doCreateUpload(details: IUploadDetails, buffer: Buffer, appId: string): Promise<IUpload> {\n        if (this.hasWritePermission(appId)) {\n            return this.createUpload(details, buffer, appId);\n        }\n    }\n\n    protected abstract getById(id: string, appId: string): Promise<IUpload>;\n\n    protected abstract getBuffer(upload: IUpload, appId: string): Promise<Buffer>;\n\n    protected abstract createUpload(details: IUploadDetails, buffer: Buffer, appId: string): Promise<IUpload>;\n\n    private hasReadPermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.upload.read)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.upload.read],\n            }),\n        );\n\n        return false;\n    }\n\n    private hasWritePermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.upload.write)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.upload.write],\n            }),\n        );\n\n        return false;\n    }\n}\n"]}