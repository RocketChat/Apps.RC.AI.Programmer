{"version":3,"sources":["src/server/bridges/MessageBridge.ts"],"names":[],"mappings":";;;;;;;;;;;;AAIA,2EAAwE;AACxE,2EAAwE;AACxE,kEAA+D;AAC/D,6CAA0C;AAM1C,MAAsB,aAAc,SAAQ,uBAAU;IACrC,QAAQ,CAAC,OAAiB,EAAE,KAAa;;YAClD,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aACtC;QACL,CAAC;KAAA;IAEY,QAAQ,CAAC,OAAiB,EAAE,KAAa;;YAClD,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aACtC;QACL,CAAC;KAAA;IAEY,YAAY,CAAC,IAAW,EAAE,OAAiB,EAAE,KAAa;;YACnE,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;aAChD;QACL,CAAC;KAAA;IAEY,YAAY,CAAC,IAAW,EAAE,OAAiB,EAAE,KAAa;;YACnE,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;aAChD;QACL,CAAC;KAAA;IAEY,QAAQ,CAAC,OAA0B,EAAE,KAAa;;YAC3D,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aACtC;QACL,CAAC;KAAA;IAEY,SAAS,CAAC,SAAiB,EAAE,KAAa;;YACnD,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;aACzC;QACL,CAAC;KAAA;IAEY,QAAQ,CAAC,OAAiB,EAAE,IAAW,EAAE,KAAa;;YAC/D,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;aAC5C;QACL,CAAC;KAAA;IAgBO,iBAAiB,CAAC,KAAa;QACnC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxE,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,OAAO,CAAC,IAAI,CAAC;SACpD,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;IAEO,kBAAkB,CAAC,KAAa;QACpC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACzE,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,OAAO,CAAC,KAAK,CAAC;SACrD,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AAtFD,sCAsFC","file":"MessageBridge.js","sourcesContent":["import type { ITypingOptions } from '../../definition/accessors/INotifier';\nimport type { IMessage } from '../../definition/messages';\nimport type { IRoom } from '../../definition/rooms';\nimport type { IUser } from '../../definition/users';\nimport { PermissionDeniedError } from '../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../managers/AppPermissionManager';\nimport { AppPermissions } from '../permissions/AppPermissions';\nimport { BaseBridge } from './BaseBridge';\n\nexport interface ITypingDescriptor extends ITypingOptions {\n    isTyping: boolean;\n}\n\nexport abstract class MessageBridge extends BaseBridge {\n    public async doCreate(message: IMessage, appId: string): Promise<string> {\n        if (this.hasWritePermission(appId)) {\n            return this.create(message, appId);\n        }\n    }\n\n    public async doUpdate(message: IMessage, appId: string): Promise<void> {\n        if (this.hasWritePermission(appId)) {\n            return this.update(message, appId);\n        }\n    }\n\n    public async doNotifyUser(user: IUser, message: IMessage, appId: string): Promise<void> {\n        if (this.hasWritePermission(appId)) {\n            return this.notifyUser(user, message, appId);\n        }\n    }\n\n    public async doNotifyRoom(room: IRoom, message: IMessage, appId: string): Promise<void> {\n        if (this.hasWritePermission(appId)) {\n            return this.notifyRoom(room, message, appId);\n        }\n    }\n\n    public async doTyping(options: ITypingDescriptor, appId: string): Promise<void> {\n        if (this.hasWritePermission(appId)) {\n            return this.typing(options, appId);\n        }\n    }\n\n    public async doGetById(messageId: string, appId: string): Promise<IMessage> {\n        if (this.hasReadPermission(appId)) {\n            return this.getById(messageId, appId);\n        }\n    }\n\n    public async doDelete(message: IMessage, user: IUser, appId: string): Promise<void> {\n        if (this.hasWritePermission(appId)) {\n            return this.delete(message, user, appId);\n        }\n    }\n\n    protected abstract create(message: IMessage, appId: string): Promise<string>;\n\n    protected abstract update(message: IMessage, appId: string): Promise<void>;\n\n    protected abstract notifyUser(user: IUser, message: IMessage, appId: string): Promise<void>;\n\n    protected abstract notifyRoom(room: IRoom, message: IMessage, appId: string): Promise<void>;\n\n    protected abstract typing(options: ITypingDescriptor, appId: string): Promise<void>;\n\n    protected abstract getById(messageId: string, appId: string): Promise<IMessage>;\n\n    protected abstract delete(message: IMessage, user: IUser, appId: string): Promise<void>;\n\n    private hasReadPermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.message.read)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.message.read],\n            }),\n        );\n\n        return false;\n    }\n\n    private hasWritePermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.message.write)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.message.write],\n            }),\n        );\n\n        return false;\n    }\n}\n"]}