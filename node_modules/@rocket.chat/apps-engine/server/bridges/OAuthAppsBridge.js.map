{"version":3,"sources":["src/server/bridges/OAuthAppsBridge.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,2EAAwE;AACxE,2EAAwE;AACxE,kEAA+D;AAC/D,6CAA0C;AAE1C,MAAsB,eAAgB,SAAQ,uBAAU;IACvC,QAAQ,CAAC,QAAyB,EAAE,KAAa;;YAC1D,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;aACvC;QACL,CAAC;KAAA;IAEY,SAAS,CAAC,EAAU,EAAE,KAAa;;YAC5C,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;aAClC;QACL,CAAC;KAAA;IAEY,WAAW,CAAC,IAAY,EAAE,KAAa;;YAChD,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aACtC;QACL,CAAC;KAAA;IAEY,QAAQ,CAAC,QAAyB,EAAE,EAAU,EAAE,KAAa;;YACtE,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;aAC3C;QACL,CAAC;KAAA;IAEY,QAAQ,CAAC,EAAU,EAAE,KAAa;;YAC3C,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;aACjC;QACL,CAAC;KAAA;IAEY,OAAO,CAAC,KAAa;;YAC9B,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aAC5B;QACL,CAAC;KAAA;IAcO,kBAAkB,CAAC,KAAa;QACpC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,EAAE;YAC9E,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC;SAC1D,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;IAEO,iBAAiB,CAAC,KAAa;QACnC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,EAAE;YAC7E,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;SACzD,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AA9ED,0CA8EC","file":"OAuthAppsBridge.js","sourcesContent":["import type { IOAuthApp, IOAuthAppParams } from '../../definition/accessors/IOAuthApp';\nimport { PermissionDeniedError } from '../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../managers/AppPermissionManager';\nimport { AppPermissions } from '../permissions/AppPermissions';\nimport { BaseBridge } from './BaseBridge';\n\nexport abstract class OAuthAppsBridge extends BaseBridge {\n    public async doCreate(oAuthApp: IOAuthAppParams, appId: string) {\n        if (this.hasWritePermission(appId)) {\n            return this.create(oAuthApp, appId);\n        }\n    }\n\n    public async doGetByid(id: string, appId: string) {\n        if (this.hasReadPermission(appId)) {\n            return this.getById(id, appId);\n        }\n    }\n\n    public async doGetByName(name: string, appId: string) {\n        if (this.hasReadPermission(appId)) {\n            return this.getByName(name, appId);\n        }\n    }\n\n    public async doUpdate(oAuthApp: IOAuthAppParams, id: string, appId: string) {\n        if (this.hasWritePermission(appId)) {\n            return this.update(oAuthApp, id, appId);\n        }\n    }\n\n    public async doDelete(id: string, appId: string) {\n        if (this.hasWritePermission(appId)) {\n            return this.delete(id, appId);\n        }\n    }\n\n    public async doPurge(appId: string) {\n        if (this.hasWritePermission(appId)) {\n            return this.purge(appId);\n        }\n    }\n\n    protected abstract create(oAuthApp: IOAuthAppParams, appId: string): Promise<string | null>;\n\n    protected abstract getById(id: string, appId: string): Promise<IOAuthApp | null>;\n\n    protected abstract getByName(name: string, appId: string): Promise<Array<IOAuthApp | null>>;\n\n    protected abstract update(oAuthApp: IOAuthAppParams, id: string, appId: string): Promise<void>;\n\n    protected abstract delete(id: string, appId: string): Promise<void>;\n\n    protected abstract purge(appId: string): Promise<void>;\n\n    private hasWritePermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions['oauth-app'].write)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions['oauth-app'].write],\n            }),\n        );\n\n        return false;\n    }\n\n    private hasReadPermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions['oauth-app'].read)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions['oauth-app'].read],\n            }),\n        );\n\n        return false;\n    }\n}\n"]}