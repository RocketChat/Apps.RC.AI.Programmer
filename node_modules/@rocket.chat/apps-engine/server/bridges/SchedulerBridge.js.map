{"version":3,"sources":["src/server/bridges/SchedulerBridge.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,2EAAwE;AACxE,2EAAwE;AACxE,kEAA+D;AAC/D,6CAA0C;AAE1C,MAAsB,eAAgB,SAAQ,uBAAU;IACvC,oBAAoB,CAAC,aAAgC,EAAE,EAAE,KAAa;;YAC/E,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;aACrD;QACL,CAAC;KAAA;IAEY,cAAc,CAAC,GAAqB,EAAE,KAAa;;YAC5D,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aACxC;QACL,CAAC;KAAA;IAEY,mBAAmB,CAAC,GAAuB,EAAE,KAAa;;YACnE,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aAC7C;QACL,CAAC;KAAA;IAEY,WAAW,CAAC,KAAa,EAAE,KAAa;;YACjD,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;aACvC;QACL,CAAC;KAAA;IAEY,eAAe,CAAC,KAAa;;YACtC,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aACpC;QACL,CAAC;KAAA;IAYO,oBAAoB,CAAC,KAAa;QACtC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YAC7E,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CACjC,IAAI,6CAAqB,CAAC;YACtB,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,SAAS,CAAC,OAAO,CAAC;SACzD,CAAC,CACL,CAAC;QAEF,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AAvDD,0CAuDC","file":"SchedulerBridge.js","sourcesContent":["import type { IOnetimeSchedule, IProcessor, IRecurringSchedule } from '../../definition/scheduler';\nimport { PermissionDeniedError } from '../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../managers/AppPermissionManager';\nimport { AppPermissions } from '../permissions/AppPermissions';\nimport { BaseBridge } from './BaseBridge';\n\nexport abstract class SchedulerBridge extends BaseBridge {\n    public async doRegisterProcessors(processors: Array<IProcessor> = [], appId: string): Promise<void | Array<string>> {\n        if (this.hasDefaultPermission(appId)) {\n            return this.registerProcessors(processors, appId);\n        }\n    }\n\n    public async doScheduleOnce(job: IOnetimeSchedule, appId: string): Promise<void | string> {\n        if (this.hasDefaultPermission(appId)) {\n            return this.scheduleOnce(job, appId);\n        }\n    }\n\n    public async doScheduleRecurring(job: IRecurringSchedule, appId: string): Promise<void | string> {\n        if (this.hasDefaultPermission(appId)) {\n            return this.scheduleRecurring(job, appId);\n        }\n    }\n\n    public async doCancelJob(jobId: string, appId: string): Promise<void> {\n        if (this.hasDefaultPermission(appId)) {\n            return this.cancelJob(jobId, appId);\n        }\n    }\n\n    public async doCancelAllJobs(appId: string): Promise<void> {\n        if (this.hasDefaultPermission(appId)) {\n            return this.cancelAllJobs(appId);\n        }\n    }\n\n    protected abstract registerProcessors(processors: Array<IProcessor>, appId: string): Promise<void | Array<string>>;\n\n    protected abstract scheduleOnce(job: IOnetimeSchedule, appId: string): Promise<void | string>;\n\n    protected abstract scheduleRecurring(job: IRecurringSchedule, appId: string): Promise<void | string>;\n\n    protected abstract cancelJob(jobId: string, appId: string): Promise<void>;\n\n    protected abstract cancelAllJobs(appId: string): Promise<void>;\n\n    private hasDefaultPermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.scheduler.default)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.scheduler.default],\n            }),\n        );\n\n        return false;\n    }\n}\n"]}