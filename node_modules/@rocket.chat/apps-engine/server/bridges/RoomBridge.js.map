{"version":3,"sources":["src/server/bridges/RoomBridge.ts"],"names":[],"mappings":"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","file":"RoomBridge.js","sourcesContent":["import type { IMessage } from '../../definition/messages';\nimport type { IRoom } from '../../definition/rooms';\nimport type { IUser } from '../../definition/users';\nimport { PermissionDeniedError } from '../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../managers/AppPermissionManager';\nimport { AppPermissions } from '../permissions/AppPermissions';\nimport { BaseBridge } from './BaseBridge';\n\nexport abstract class RoomBridge extends BaseBridge {\n    public async doCreate(room: IRoom, members: Array<string>, appId: string): Promise<string> {\n        if (this.hasWritePermission(appId)) {\n            return this.create(room, members, appId);\n        }\n    }\n\n    public async doGetById(roomId: string, appId: string): Promise<IRoom> {\n        if (this.hasReadPermission(appId)) {\n            return this.getById(roomId, appId);\n        }\n    }\n\n    public async doGetByName(roomName: string, appId: string): Promise<IRoom> {\n        if (this.hasReadPermission(appId)) {\n            return this.getByName(roomName, appId);\n        }\n    }\n\n    public async doGetCreatorById(roomId: string, appId: string): Promise<IUser | undefined> {\n        if (this.hasReadPermission(appId)) {\n            return this.getCreatorById(roomId, appId);\n        }\n    }\n\n    public async doGetCreatorByName(roomName: string, appId: string): Promise<IUser | undefined> {\n        if (this.hasReadPermission(appId)) {\n            return this.getCreatorByName(roomName, appId);\n        }\n    }\n\n    public async doGetDirectByUsernames(usernames: Array<string>, appId: string): Promise<IRoom | undefined> {\n        if (this.hasReadPermission(appId)) {\n            return this.getDirectByUsernames(usernames, appId);\n        }\n    }\n\n    public async doGetMembers(roomId: string, appId: string): Promise<Array<IUser>> {\n        if (this.hasReadPermission(appId)) {\n            return this.getMembers(roomId, appId);\n        }\n    }\n\n    public async doUpdate(room: IRoom, members: Array<string>, appId: string): Promise<void> {\n        if (this.hasWritePermission(appId)) {\n            return this.update(room, members, appId);\n        }\n    }\n\n    public async doCreateDiscussion(\n        room: IRoom,\n        parentMessage: IMessage | undefined,\n        reply: string | undefined,\n        members: Array<string>,\n        appId: string,\n    ): Promise<string> {\n        if (this.hasWritePermission(appId)) {\n            return this.createDiscussion(room, parentMessage, reply, members, appId);\n        }\n    }\n\n    public async doDelete(room: string, appId: string): Promise<void> {\n        if (this.hasWritePermission(appId)) {\n            return this.delete(room, appId);\n        }\n    }\n\n    public async doGetModerators(roomId: string, appId: string): Promise<Array<IUser>> {\n        if (this.hasReadPermission(appId)) {\n            return this.getModerators(roomId, appId);\n        }\n    }\n\n    public async doGetOwners(roomId: string, appId: string): Promise<Array<IUser>> {\n        if (this.hasReadPermission(appId)) {\n            return this.getOwners(roomId, appId);\n        }\n    }\n\n    public async doGetLeaders(roomId: string, appId: string): Promise<Array<IUser>> {\n        if (this.hasReadPermission(appId)) {\n            return this.getLeaders(roomId, appId);\n        }\n    }\n\n    protected abstract create(room: IRoom, members: Array<string>, appId: string): Promise<string>;\n\n    protected abstract getById(roomId: string, appId: string): Promise<IRoom>;\n\n    protected abstract getByName(roomName: string, appId: string): Promise<IRoom>;\n\n    protected abstract getCreatorById(roomId: string, appId: string): Promise<IUser | undefined>;\n\n    protected abstract getCreatorByName(roomName: string, appId: string): Promise<IUser | undefined>;\n\n    protected abstract getDirectByUsernames(usernames: Array<string>, appId: string): Promise<IRoom | undefined>;\n\n    protected abstract getMembers(roomId: string, appId: string): Promise<Array<IUser>>;\n\n    protected abstract update(room: IRoom, members: Array<string>, appId: string): Promise<void>;\n\n    protected abstract createDiscussion(\n        room: IRoom,\n        parentMessage: IMessage | undefined,\n        reply: string | undefined,\n        members: Array<string>,\n        appId: string,\n    ): Promise<string>;\n\n    protected abstract delete(room: string, appId: string): Promise<void>;\n\n    protected abstract getModerators(roomId: string, appId: string): Promise<Array<IUser>>;\n\n    protected abstract getOwners(roomId: string, appId: string): Promise<Array<IUser>>;\n\n    protected abstract getLeaders(roomId: string, appId: string): Promise<Array<IUser>>;\n\n    private hasWritePermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.room.write)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.room.write],\n            }),\n        );\n\n        return false;\n    }\n\n    private hasReadPermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.room.read)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(\n            new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.room.read],\n            }),\n        );\n\n        return false;\n    }\n}\n"]}