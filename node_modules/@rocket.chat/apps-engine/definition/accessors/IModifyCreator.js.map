{"version":3,"sources":["src/definition/accessors/IModifyCreator.ts"],"names":[],"mappings":"","file":"IModifyCreator.js","sourcesContent":["import type { ILivechatMessage } from '../livechat';\nimport type { IMessage } from '../messages';\nimport type { IRoom } from '../rooms';\nimport type { BlockBuilder } from '../uikit';\nimport type { AppVideoConference } from '../videoConferences';\nimport type { IBotUser } from '../users/IBotUser';\nimport type { IDiscussionBuilder } from './IDiscussionBuilder';\nimport type { ILivechatCreator } from './ILivechatCreator';\nimport type { ILivechatMessageBuilder } from './ILivechatMessageBuilder';\nimport type { IMessageBuilder } from './IMessageBuilder';\nimport type { IRoomBuilder } from './IRoomBuilder';\nimport type { IUploadCreator } from './IUploadCreator';\nimport type { IUserBuilder } from './IUserBuilder';\nimport type { IVideoConferenceBuilder } from './IVideoConferenceBuilder';\n\nexport interface IModifyCreator {\n    /**\n     * Get the creator object responsible for the\n     * Livechat integrations\n     */\n    getLivechatCreator(): ILivechatCreator;\n\n    /**\n     * Get the creator object responsible for the upload.\n     */\n    getUploadCreator(): IUploadCreator;\n\n    /**\n     * @deprecated please prefer the rocket.chat/ui-kit components\n     *\n     * Gets a new instance of a BlockBuilder\n     */\n    getBlockBuilder(): BlockBuilder;\n    /**\n     * Starts the process for building a new message object.\n     *\n     * @param data (optional) the initial data to pass into the builder,\n     *          the `id` property will be ignored\n     * @return an IMessageBuilder instance\n     */\n    startMessage(data?: IMessage): IMessageBuilder;\n\n    /**\n     * Starts the process for building a new livechat message object.\n     *\n     * @param data (optional) the initial data to pass into the builder,\n     *          the `id` property will be ignored\n     * @return an IMessageBuilder instance\n     */\n    startLivechatMessage(data?: ILivechatMessage): ILivechatMessageBuilder;\n\n    /**\n     * Starts the process for building a new room.\n     *\n     * @param data (optional) the initial data to pass into the builder,\n     *          the `id` property will be ignored\n     * @return an IRoomBuilder instance\n     */\n    startRoom(data?: IRoom): IRoomBuilder;\n\n    /**\n     * Starts the process for building a new discussion.\n     *\n     * @param data (optional) the initial data to pass into the builder,\n     *          the `id` property will be ignored\n     * @return an IDiscussionBuilder instance\n     */\n    startDiscussion(data?: Partial<IRoom>): IDiscussionBuilder;\n\n    /**\n     * Starts the process for building a new video conference.\n     *\n     * @param data (optional) the initial data to pass into the builder,\n     * @return an IVideoConferenceBuilder instance\n     */\n    startVideoConference(data?: Partial<AppVideoConference>): IVideoConferenceBuilder;\n\n    /**\n     * Starts the process for building a new bot user.\n     *\n     * @param data (optional) the initial data to pass into the builder,\n     *          the `id` property will be ignored\n     * @return an IUserBuilder instance\n     */\n    startBotUser(data?: Partial<IBotUser>): IUserBuilder;\n\n    /**\n     * Finishes the creating process, saving the object to the database.\n     *\n     * @param builder the builder instance\n     * @return the resulting `id` of the resulting object\n     */\n    finish(builder: IMessageBuilder | ILivechatMessageBuilder | IRoomBuilder | IDiscussionBuilder | IVideoConferenceBuilder | IUserBuilder): Promise<string>;\n}\n"]}