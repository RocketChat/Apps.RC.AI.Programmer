{"version":3,"sources":["src/definition/accessors/IModifyExtender.ts"],"names":[],"mappings":"","file":"IModifyExtender.js","sourcesContent":["import type { IUser } from '../users';\nimport type { IMessageExtender } from './IMessageExtender';\nimport type { IRoomExtender } from './IRoomExtender';\nimport type { IVideoConferenceExtender } from './IVideoConferenceExtend';\n\nexport interface IModifyExtender {\n    /**\n     * Modifies a message in a non-destructive way: Properties can be added to it,\n     * but existing properties cannot be changed.\n     *\n     * @param messageId the id of the message to be extended\n     * @param updater the user who is updating/extending the message\n     * @return the extender instance for the message\n     */\n    extendMessage(messageId: string, updater: IUser): Promise<IMessageExtender>;\n\n    /**\n     * Modifies a room in a non-destructive way: Properties can be added to it,\n     * but existing properties cannot be changed.\n     *\n     * @param roomId the id of the room to be extended\n     * @param updater the user who is updating/extending the room\n     * @return the extender instance for the room\n     */\n    extendRoom(roomId: string, updater: IUser): Promise<IRoomExtender>;\n\n    /**\n     * Modifies a video conference in a non-destructive way: Properties can be added to it,\n     * but existing properties cannot be changed.\n     */\n    extendVideoConference(id: string): Promise<IVideoConferenceExtender>;\n\n    /**\n     * Finishes the extending process, saving the object to the database.\n     * Note: If there is an issue or error while updating, this will throw an error.\n     *\n     * @param extender the extender instance\n     */\n    finish(extender: IRoomExtender | IMessageExtender | IVideoConferenceExtender): Promise<void>;\n}\n"]}