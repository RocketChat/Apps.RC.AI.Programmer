{"version":3,"sources":["src/definition/accessors/IMessageBuilder.ts"],"names":[],"mappings":"","file":"IMessageBuilder.js","sourcesContent":["import type { Block } from '@rocket.chat/ui-kit';\n\nimport type { IMessage, IMessageAttachment } from '../messages';\nimport type { RocketChatAssociationModel } from '../metadata';\nimport type { IRoom } from '../rooms';\nimport type { BlockBuilder, IBlock } from '../uikit';\nimport type { IUser } from '../users';\n\n/**\n * Interface for building out a message.\n * Please note, that a room and sender must be associated otherwise you will NOT\n * be able to successfully save the message object.\n */\nexport interface IMessageBuilder {\n    kind: RocketChatAssociationModel.MESSAGE;\n\n    /**\n     * Provides a convenient way to set the data for the message.\n     * Note: Providing an \"id\" field here will be ignored.\n     *\n     * @param message the message data to set\n     */\n    setData(message: IMessage): IMessageBuilder;\n\n    /**\n     * Provides a convenient way to set the data for the message\n     * keeping the \"id\" field so as to update the message later.\n     *\n     * @param message the message data to set\n     * @param editor the user who edited the updated message\n     */\n    setUpdateData(message: IMessage, editor: IUser): IMessageBuilder;\n\n    /**\n     * Sets the thread to which this message belongs, if any.\n     *\n     * @param threadId The id of the thread\n     */\n    setThreadId(threadId: string): IMessageBuilder;\n\n    /**\n     * Retrieves the threadId to which this message belongs,\n     * if any.\n     *\n     * If you would like to retrieve the actual message that\n     * the thread originated from, you can use the\n     * `IMessageRead.getById()` method\n     */\n    getThreadId(): string;\n\n    /**\n     * Sets the room where this message should be sent to.\n     *\n     * @param room the room where to send\n     */\n    setRoom(room: IRoom): IMessageBuilder;\n\n    /**\n     * Gets the room where this message was sent to.\n     */\n    getRoom(): IRoom;\n\n    /**\n     * Sets the sender of this message.\n     *\n     * @param sender the user sending the message\n     */\n    setSender(sender: IUser): IMessageBuilder;\n\n    /**\n     * Gets the User which sent the message.\n     */\n    getSender(): IUser;\n\n    /**\n     * Sets the text of the message.\n     *\n     * @param text the actual text\n     */\n    setText(text: string): IMessageBuilder;\n\n    /**\n     * Gets the message text.\n     */\n    getText(): string;\n\n    /**\n     * Sets the emoji to use for the avatar, this overwrites the current avatar\n     * whether it be the user's or the avatar url provided.\n     *\n     * @param emoji the emoji code\n     */\n    setEmojiAvatar(emoji: string): IMessageBuilder;\n\n    /**\n     * Gets the emoji used for the avatar.\n     */\n    getEmojiAvatar(): string;\n\n    /**\n     * Sets the url which to display for the avatar, this overwrites the current\n     * avatar whether it be the user's or an emoji one.\n     *\n     * @param avatarUrl image url to use as the avatar\n     */\n    setAvatarUrl(avatarUrl: string): IMessageBuilder;\n\n    /**\n     * Gets the url used for the avatar.\n     */\n    getAvatarUrl(): string;\n\n    /**\n     * Sets the display text of the sender's username that is visible.\n     *\n     * @param alias the username alias to display\n     */\n    setUsernameAlias(alias: string): IMessageBuilder;\n\n    /**\n     * Gets the display text of the sender's username that is visible.\n     */\n    getUsernameAlias(): string;\n\n    /**\n     * Adds one attachment to the message's list of attachments, this will not\n     * overwrite any existing ones but just adds.\n     *\n     * @param attachment the attachment to add\n     */\n    addAttachment(attachment: IMessageAttachment): IMessageBuilder;\n\n    /**\n     * Sets the attachments for the message, replacing and destroying all of the current attachments.\n     *\n     * @param attachments array of the attachments\n     */\n    setAttachments(attachments: Array<IMessageAttachment>): IMessageBuilder;\n\n    /**\n     * Gets the attachments array for the message\n     */\n    getAttachments(): Array<IMessageAttachment>;\n\n    /**\n     * Replaces an attachment at the given position (index).\n     * If there is no attachment at that position, there will be an error thrown.\n     *\n     * @param position the index of the attachment to replace\n     * @param attachment the attachment to replace with\n     */\n    replaceAttachment(position: number, attachment: IMessageAttachment): IMessageBuilder;\n\n    /**\n     * Removes an attachment at the given position (index).\n     * If there is no attachment at that position, there will be an error thrown.\n     *\n     * @param position the index of the attachment to remove\n     */\n    removeAttachment(position: number): IMessageBuilder;\n\n    /**\n     * Sets the user who is editing this message.\n     * This is required if you are modifying an existing message.\n     *\n     * @param user the editor\n     */\n    setEditor(user: IUser): IMessageBuilder;\n\n    /**\n     * Gets the user who edited the message\n     */\n    getEditor(): IUser;\n\n    /**\n     * Sets whether this message can group with others.\n     * This is desirable if you want to avoid confusion with other integrations.\n     *\n     * @param groupable whether this message can group with others\n     */\n    setGroupable(groupable: boolean): IMessageBuilder;\n\n    /**\n     * Gets whether this message can group with others.\n     */\n    getGroupable(): boolean;\n\n    /**\n     * Sets whether this message should have any URLs in the text\n     * parsed by Rocket.Chat and get the details added to the message's\n     * attachments.\n     *\n     * @param parseUrls whether URLs should be parsed in this message\n     */\n    setParseUrls(parseUrls: boolean): IMessageBuilder;\n\n    /**\n     * Gets whether this message should have its URLs parsed\n     */\n    getParseUrls(): boolean;\n\n    /**\n     * Gets the resulting message that has been built up to the point of calling it.\n     *\n     * *Note:* This will error out if the Room has not been defined.\n     */\n    getMessage(): IMessage;\n\n    /**\n     * Adds a block collection to the message's\n     * own collection\n     */\n    addBlocks(blocks: BlockBuilder | Array<IBlock | Block>): IMessageBuilder;\n\n    /**\n     * Sets the block collection of the message\n     *\n     * @param blocks\n     */\n    setBlocks(blocks: BlockBuilder | Array<IBlock | Block>): IMessageBuilder;\n\n    /**\n     * Gets the block collection of the message\n     */\n    getBlocks(): Array<IBlock | Block>;\n\n    /**\n     * Adds a custom field to the message.\n     * Note: This key can not already exist or it will throw an error.\n     * Note: The key must not contain a period in it, an error will be thrown.\n     *\n     * @param key the name of the custom field\n     * @param value the value of this custom field\n     */\n    addCustomField(key: string, value: any): IMessageBuilder;\n}\n"]}