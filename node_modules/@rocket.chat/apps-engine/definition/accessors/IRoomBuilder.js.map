{"version":3,"sources":["src/definition/accessors/IRoomBuilder.ts"],"names":[],"mappings":"","file":"IRoomBuilder.js","sourcesContent":["import type { RocketChatAssociationModel } from '../metadata';\nimport type { IRoom, RoomType } from '../rooms';\nimport type { IUser } from '../users';\n\n/**\n * Interface for building out a room.\n * Please note, a room creator, name, and type must be set otherwise you will NOT\n * be able to successfully save the room object.\n */\nexport interface IRoomBuilder {\n    kind: RocketChatAssociationModel.ROOM | RocketChatAssociationModel.DISCUSSION;\n\n    /**\n     * Provides a convient way to set the data for the room.\n     * Note: Providing an \"id\" field here will be ignored.\n     *\n     * @param room the room data to set\n     */\n    setData(room: Partial<IRoom>): IRoomBuilder;\n\n    /**\n     * Sets the display name of this room.\n     *\n     * @param name the display name of the room\n     */\n    setDisplayName(name: string): IRoomBuilder;\n\n    /**\n     * Gets the display name of this room.\n     */\n    getDisplayName(): string;\n\n    /**\n     * Sets the slugified name of this room, it must align to the rules of Rocket.Chat room\n     * names otherwise there will be an error thrown (no spaces, special characters, etc).\n     *\n     * @param name the slugified name\n     */\n    setSlugifiedName(name: string): IRoomBuilder;\n\n    /**\n     * Gets the slugified name of this room.\n     */\n    getSlugifiedName(): string;\n\n    /**\n     * Sets the room's type.\n     *\n     * @param type the room type\n     */\n    setType(type: RoomType): IRoomBuilder;\n\n    /**\n     * Gets the room's type.\n     */\n    getType(): RoomType;\n\n    /**\n     * Sets the creator of the room.\n     *\n     * @param creator the user who created the room\n     */\n    setCreator(creator: IUser): IRoomBuilder;\n\n    /**\n     * Gets the room's creator.\n     */\n    getCreator(): IUser;\n\n    /**\n     * Adds a user to the room, these are by username until further notice.\n     *\n     * @param username the user's username to add to the room\n     * @deprecated in favor of `addMemberToBeAddedByUsername`. This method will be removed on version 2.0.0\n     */\n    addUsername(username: string): IRoomBuilder;\n\n    /**\n     * Sets the usernames of who are joined to the room.\n     *\n     * @param usernames the list of usernames\n     * @deprecated in favor of `setMembersByUsernames`. This method will be removed on version 2.0.0\n     */\n    setUsernames(usernames: Array<string>): IRoomBuilder;\n\n    /**\n     * Gets the usernames of users in the room.\n     * @deprecated in favor of `getMembersUsernames`. This method will be removed on version 2.0.0\n     */\n    getUsernames(): Array<string>;\n\n    /**\n     * Adds a member to the room by username\n     *\n     * @param username the user's username to add to the room\n     */\n    addMemberToBeAddedByUsername(username: string): IRoomBuilder;\n\n    /**\n     * Sets a list of members to the room by usernames\n     *\n     * @param usernames the list of usernames\n     */\n    setMembersToBeAddedByUsernames(usernames: Array<string>): IRoomBuilder;\n\n    /**\n     * Gets the list of usernames of the members who are been added to the room\n     */\n    getMembersToBeAddedUsernames(): Array<string>;\n\n    /**\n     * Sets whether this room should be a default room or not.\n     * This means that new users will automatically join this room\n     * when they join the server.\n     *\n     * @param isDefault room should be default or not\n     */\n    setDefault(isDefault: boolean): IRoomBuilder;\n\n    /**\n     * Gets whether this room is a default room or not.\n     */\n    getIsDefault(): boolean;\n\n    /**\n     * Sets whether this room should be in read only state or not.\n     * This means that users without the required permission to talk when\n     * a room is muted will not be able to talk but instead will only be\n     * able to read the contents of the room.\n     *\n     * @param isReadOnly whether it should be read only or not\n     */\n    setReadOnly(isReadOnly: boolean): IRoomBuilder;\n\n    /**\n     * Gets whether this room is on read only state or not.\n     */\n    getIsReadOnly(): boolean;\n\n    /**\n     * Sets whether this room should display the system messages (like user join, etc)\n     * or not. This means that whenever a system event, such as joining or leaving, happens\n     * then Rocket.Chat won't send the message to the channel.\n     *\n     * @param displaySystemMessages whether the messages should display or not\n     */\n    setDisplayingOfSystemMessages(displaySystemMessages: boolean): IRoomBuilder;\n\n    /**\n     * Gets whether this room should display the system messages or not.\n     */\n    getDisplayingOfSystemMessages(): boolean;\n\n    /**\n     * Adds a custom field to the room.\n     * Note: This will replace an existing field with the same key should it exist already.\n     *\n     * @param key the name of the key\n     * @param value the value of the custom field\n     */\n    addCustomField(key: string, value: object): IRoomBuilder;\n\n    /**\n     * Sets the entire custom field property to an object provided. This will overwrite\n     * every existing key/values which are unrecoverable.\n     *\n     * @param fields the data to set\n     */\n    setCustomFields(fields: { [key: string]: object }): IRoomBuilder;\n\n    /**\n     * Gets the custom field property of the room.\n     */\n    getCustomFields(): { [key: string]: object };\n\n    /**\n     * Gets user ids of members from a direct message\n     */\n    getUserIds(): Array<string>;\n\n    /**\n     * Gets the resulting room that has been built up to the point of calling this method.\n     * Note: modifying the returned value will have no effect.\n     */\n    getRoom(): IRoom;\n}\n"]}