{"version":3,"sources":["src/definition/accessors/IUserBuilder.ts"],"names":[],"mappings":"","file":"IUserBuilder.js","sourcesContent":["import type { RocketChatAssociationModel } from '../metadata';\nimport type { IUser, IUserEmail } from '../users';\n\n/**\n * Interface for creating a user.\n * Please note, a username and email provided must be unique else you will NOT\n * be able to successfully save the user object.\n */\nexport interface IUserBuilder {\n    kind: RocketChatAssociationModel.USER;\n\n    /**\n     * Provides a convient way to set the data for the user.\n     * Note: Providing an \"id\" field here will be ignored.\n     *\n     * @param user the user data to set\n     */\n    setData(user: Partial<IUser>): IUserBuilder;\n\n    /**\n     * Sets emails of the user\n     *\n     * @param emails the array of email addresses of the user\n     */\n    setEmails(emails: Array<IUserEmail>): IUserBuilder;\n\n    /**\n     * Gets emails of the user\n     */\n    getEmails(): Array<IUserEmail>;\n\n    /**\n     * Sets the display name of this user.\n     *\n     * @param name the display name of the user\n     */\n    setDisplayName(name: string): IUserBuilder;\n\n    /**\n     * Gets the display name of this user.\n     */\n    getDisplayName(): string;\n\n    /**\n     * Sets the username for the user\n     *\n     * @param username username of the user\n     */\n    setUsername(username: string): IUserBuilder;\n\n    /**\n     * Gets the username of this user\n     */\n    getUsername(): string;\n\n    /**\n     * Gets the user\n     */\n    getUser(): Partial<IUser>;\n}\n"]}