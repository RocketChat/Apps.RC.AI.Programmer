{"version":3,"sources":["src/definition/oauth2/IOAuth2.ts"],"names":[],"mappings":"","file":"IOAuth2.js","sourcesContent":["import type { URL } from 'url';\n\nimport type { IConfigurationExtend, IHttp, IModify, IPersistence, IRead } from '../accessors';\nimport type { IUser } from '../users/IUser';\n\n/**\n * Authorization data as provided after\n * token exchange\n */\nexport interface IAuthData {\n    /**\n     * Access token from application\n     */\n    token: string;\n    /**\n     * The token's expiration time in seconds\n     */\n    expiresAt: number;\n    /**\n     * Scope(s) authorized by the user.\n     *\n     * Format can change depending on provider, but usually\n     * when there are more than one scope, they are separated\n     * by a white-space caracter\n     */\n    scope: string;\n    /**\n     * A token that can be used to request a new access token\n     * when the current one has expired.\n     *\n     * Not all providers have a refresh token.\n     */\n    refreshToken?: string;\n}\n\n/**\n * Options passed to the OAuth2Client object during instantiation.\n * Describes URLs of the authorization service and optional behavior\n * for when user responds to the authorization prompt\n */\nexport interface IOAuth2ClientOptions {\n    /**\n     * Alias for the client. This is used to identify the client's resources.\n     * It is used to avoid overwriting other clients' settings or endpoints\n     * when there are multiple.\n     */\n    alias: string;\n    /**\n     * URI to request an access token from\n     */\n    accessTokenUri: string;\n    /**\n     * URI to redirect user for them to authorize access\n     * by the application\n     */\n    authUri: string;\n    /**\n     * URI to request a refreshed access token for user\n     */\n    refreshTokenUri: string;\n    /**\n     * URI to revoke an access token for the user\n     */\n    revokeTokenUri: string;\n\n    /**\n     * Default scopes to be used when requesting access\n     */\n    defaultScopes?: Array<string>;\n    /**\n     * A function that will be executed when the auth\n     * service redirects the user back to our endpoint.\n     */\n    authorizationCallback?: (\n        token: IAuthData | undefined,\n        user: IUser,\n        read: IRead,\n        modify: IModify,\n        http: IHttp,\n        persis: IPersistence,\n    ) => Promise<{ responseContent?: string } | undefined>;\n}\n\nexport interface IOAuth2Client {\n    /**\n     * This method will set all necessary configuration for the client\n     *\n     * Please note that you will need to provide the i18n strings for the\n     * settings created. For instance, if you're connecting to Github APIs\n     * and your `alias = 'github'`, you will need to provide the following\n     * translations:\n     *\n     * ```\n     * {\n     *      \"github-oauth-client-id\": \"Client ID to connect to Github\",\n     *      \"github-oauth-clientsecret\": \"Client secret to connect to Github\"\n     * }\n     * ```\n     *\n     * @param configuration - Configuration extend to set all settings and API endpoints\n     */\n    setup(configuration: IConfigurationExtend): Promise<void>;\n\n    /**\n     * Returns the authorization URL to which the user must\n     * be redirected to in order to authorize access by the\n     * application\n     *\n     * @param user - User to authenticate\n     * @param scopes - Scopes that your app needs access to\n     */\n    getUserAuthorizationUrl(user: IUser, scopes?: Array<string>): Promise<URL>;\n\n    /**\n     * Gets the token information for a specific user, if available.\n     *\n     * @param user\n     */\n    getAccessTokenForUser(user: IUser): Promise<IAuthData | undefined>;\n\n    /**\n     * Refreshes the user's access token\n     *\n     * @param user The user whose token will be refreshed\n     * @param persis Persistence object dependency\n     */\n    refreshUserAccessToken(user: IUser, persis: IPersistence): Promise<IAuthData | undefined>;\n\n    /**\n     * Revokes user's access token in the service provider\n     *\n     * @param user The user whose token will be revoked\n     * @param persis Persistence object dependency\n     */\n    revokeUserAccessToken(user: IUser, persis: IPersistence): Promise<boolean>;\n}\n"]}