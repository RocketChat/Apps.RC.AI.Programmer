{"version":3,"sources":["src/definition/videoConfProviders/IVideoConfProvider.ts"],"names":[],"mappings":"","file":"IVideoConfProvider.js","sourcesContent":["import type { IHttp, IModify, IPersistence, IRead } from '../accessors';\nimport type { IBlock } from '../uikit';\nimport type { VideoConference } from '../videoConferences/IVideoConference';\nimport type { IVideoConferenceUser } from '../videoConferences/IVideoConferenceUser';\nimport type { IVideoConferenceOptions } from './IVideoConferenceOptions';\nimport type { VideoConfData, VideoConfDataExtended } from './VideoConfData';\n\n/**\n * Represents a video conference provider\n */\nexport interface IVideoConfProvider {\n    name: string;\n\n    capabilities?: {\n        // Indicates if Rocket.Chat can determine if the user's microphone will start muted or not\n        mic?: boolean;\n        // Indicates if Rocket.Chat can determine if the user's camera will start turned on or not\n        cam?: boolean;\n        // Indicates if Rocket.Chat can send a custom title for the video conferences\n        title?: boolean;\n    };\n\n    // Optional function that can be used to determine if the provider is ready to use or still needs to be configured\n    isFullyConfigured?(read: IRead, modify: IModify, http: IHttp, persis: IPersistence): Promise<boolean>;\n\n    // Optional function to run when a new video conference is created on this provider\n    onNewVideoConference?(call: VideoConference, read: IRead, modify: IModify, http: IHttp, persis: IPersistence): Promise<void>;\n\n    // Optional function to run when a video conference from this provider is changed by rocket.chat\n    onVideoConferenceChanged?(call: VideoConference, read: IRead, modify: IModify, http: IHttp, persis: IPersistence): Promise<void>;\n\n    // Optional function to run when a new user joins a video conference from this provider\n    onUserJoin?(call: VideoConference, user: IVideoConferenceUser | undefined, read: IRead, modify: IModify, http: IHttp, persis: IPersistence): Promise<void>;\n\n    // Optional function to run when the 'info' button of a video conference is clicked - must return blocks for a UiKit modal\n    getVideoConferenceInfo?(\n        call: VideoConference,\n        user: IVideoConferenceUser | undefined,\n        read: IRead,\n        modify: IModify,\n        http: IHttp,\n        persis: IPersistence,\n    ): Promise<Array<IBlock>>;\n\n    /**\n     * The function which gets called when a new video conference url is requested\n     */\n    generateUrl(call: VideoConfData, read: IRead, modify: IModify, http: IHttp, persis: IPersistence): Promise<string>;\n    /**\n     * The function which gets called whenever a user join url is requested\n     */\n    customizeUrl(\n        call: VideoConfDataExtended,\n        user: IVideoConferenceUser | undefined,\n        options: IVideoConferenceOptions | undefined,\n        read: IRead,\n        modify: IModify,\n        http: IHttp,\n        persis: IPersistence,\n    ): Promise<string>;\n}\n"]}