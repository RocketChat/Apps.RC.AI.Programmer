{"version":3,"sources":["src/definition/uikit/UIKitInteractionPayloadFormatter.ts"],"names":[],"mappings":";;;AAAA,+BAAkC;AAIlC,mEAA+D;AAE/D,mDAAmD;AAGnD,SAAS,kBAAkB,CAAC,IAA+B;IACvD,OAAO,CAAC,4CAAoB,CAAC,UAAU,EAAE,4CAAoB,CAAC,YAAY,EAAE,4CAAoB,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACjI,CAAC;AAED,SAAgB,sBAAsB,CAAC,IAA0B,EAAE,OAA0B;IACzF,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACnC,MAAM,IAAI,KAAK,CAAC,iBAAiB,OAAO,CAAC,IAAI,yBAAyB,CAAC,CAAC;KAC3E;IAED,OAAO;QACH,IAAI,EAAE,OAAO,CAAC,IAAI;QAClB,SAAS,EAAE,OAAO,CAAC,SAAS;QAC5B,KAAK,EAAE,OAAO,CAAC,KAAK;QACpB,IAAI,EAAE,8BACF,KAAK,EAAE,OAAO,CAAC,KAAK,EACpB,IAAI,EAAE,gCAAgB,CAAC,KAAK,EAC5B,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAA,SAAI,GAAE,IAC3B,IAAI,KACP,QAAQ,EAAE,IAAI,GACA;KACrB,CAAC;AACN,CAAC;AAjBD,wDAiBC;AAED,SAAS,0BAA0B,CAAC,IAA+B;IAC/D,OAAO,CAAC,4CAAoB,CAAC,mBAAmB,EAAE,4CAAoB,CAAC,qBAAqB,EAAE,4CAAoB,CAAC,oBAAoB,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AAC5J,CAAC;AAED,SAAgB,8BAA8B,CAAC,IAAkC,EAAE,OAA0B;IACzG,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QAC3C,MAAM,IAAI,KAAK,CAAC,iBAAiB,OAAO,CAAC,IAAI,kCAAkC,CAAC,CAAC;KACpF;IAED,OAAO;QACH,IAAI,EAAE,OAAO,CAAC,IAAI;QAClB,SAAS,EAAE,OAAO,CAAC,SAAS;QAC5B,KAAK,EAAE,OAAO,CAAC,KAAK;QACpB,IAAI,EAAE,8BACF,KAAK,EAAE,OAAO,CAAC,KAAK,EACpB,IAAI,EAAE,gCAAgB,CAAC,cAAc,EACrC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAA,SAAI,GAAE,IAC3B,IAAI,KACP,QAAQ,EAAE,IAAI,GACA;KACrB,CAAC;AACN,CAAC;AAjBD,wEAiBC;AAED,SAAgB,sBAAsB,CAAC,gBAA6C,EAAE,OAA0B;IAC5G,IAAI,4CAAoB,CAAC,MAAM,KAAK,OAAO,CAAC,IAAI,EAAE;QAC9C,MAAM,IAAI,KAAK,CAAC,iBAAiB,OAAO,CAAC,IAAI,yBAAyB,CAAC,CAAC;KAC3E;IAED,OAAO;QACH,KAAK,EAAE,OAAO,CAAC,KAAK;QACpB,IAAI,EAAE,4CAAoB,CAAC,MAAM;QACjC,MAAM,EAAE,gBAAgB,CAAC,MAAM;QAC/B,MAAM,EAAE,gBAAgB,CAAC,MAAM;QAC/B,SAAS,EAAE,OAAO,CAAC,SAAS;KAC/B,CAAC;AACN,CAAC;AAZD,wDAYC","file":"UIKitInteractionPayloadFormatter.js","sourcesContent":["import { v1 as uuid } from 'uuid';\n\nimport type { IUIKitErrorInteractionParam } from '../accessors/IUIController';\nimport type { IUIKitContextualBarInteraction, IUIKitErrorInteraction, IUIKitInteraction, IUIKitModalInteraction } from './IUIKitInteractionType';\nimport { UIKitInteractionType } from './IUIKitInteractionType';\nimport type { IUIKitSurface } from './IUIKitSurface';\nimport { UIKitSurfaceType } from './IUIKitSurface';\nimport type { IUIKitContextualBarViewParam, IUIKitModalViewParam } from './UIKitInteractionResponder';\n\nfunction isModalInteraction(type: IUIKitInteraction['type']): type is IUIKitModalInteraction['type'] {\n    return [UIKitInteractionType.MODAL_OPEN, UIKitInteractionType.MODAL_UPDATE, UIKitInteractionType.MODAL_CLOSE].includes(type);\n}\n\nexport function formatModalInteraction(view: IUIKitModalViewParam, context: IUIKitInteraction): IUIKitModalInteraction {\n    if (!isModalInteraction(context.type)) {\n        throw new Error(`Invalid type \"${context.type}\" for modal interaction`);\n    }\n\n    return {\n        type: context.type,\n        triggerId: context.triggerId,\n        appId: context.appId,\n        view: {\n            appId: context.appId,\n            type: UIKitSurfaceType.MODAL,\n            id: view.id ? view.id : uuid(),\n            ...view,\n            showIcon: true,\n        } as IUIKitSurface,\n    };\n}\n\nfunction isContextualBarInteraction(type: IUIKitInteraction['type']): type is IUIKitContextualBarInteraction['type'] {\n    return [UIKitInteractionType.CONTEXTUAL_BAR_OPEN, UIKitInteractionType.CONTEXTUAL_BAR_UPDATE, UIKitInteractionType.CONTEXTUAL_BAR_CLOSE].includes(type);\n}\n\nexport function formatContextualBarInteraction(view: IUIKitContextualBarViewParam, context: IUIKitInteraction): IUIKitContextualBarInteraction {\n    if (!isContextualBarInteraction(context.type)) {\n        throw new Error(`Invalid type \"${context.type}\" for contextual bar interaction`);\n    }\n\n    return {\n        type: context.type,\n        triggerId: context.triggerId,\n        appId: context.appId,\n        view: {\n            appId: context.appId,\n            type: UIKitSurfaceType.CONTEXTUAL_BAR,\n            id: view.id ? view.id : uuid(),\n            ...view,\n            showIcon: true,\n        } as IUIKitSurface,\n    };\n}\n\nexport function formatErrorInteraction(errorInteraction: IUIKitErrorInteractionParam, context: IUIKitInteraction): IUIKitErrorInteraction {\n    if (UIKitInteractionType.ERRORS !== context.type) {\n        throw new Error(`Invalid type \"${context.type}\" for error interaction`);\n    }\n\n    return {\n        appId: context.appId,\n        type: UIKitInteractionType.ERRORS,\n        errors: errorInteraction.errors,\n        viewId: errorInteraction.viewId,\n        triggerId: context.triggerId,\n    };\n}\n"]}