{"version":3,"sources":["src/definition/uikit/UIKitInteractionResponder.ts"],"names":[],"mappings":";;;AAGA,mEAA+D;AAG/D,yFAA4G;AAK5G,MAAa,yBAAyB;IAClC,YAA6B,WAA0C;QAA1C,gBAAW,GAAX,WAAW,CAA+B;IAAG,CAAC;IAEpE,eAAe;QAClB,OAAO;YACH,OAAO,EAAE,IAAI;SAChB,CAAC;IACN,CAAC;IAEM,aAAa;QAChB,OAAO;YACH,OAAO,EAAE,KAAK;SACjB,CAAC;IACN,CAAC;IAEM,qBAAqB,CAAC,QAA8B;QACvD,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAE9C,uBACI,OAAO,EAAE,IAAI,IACV,IAAA,yDAAsB,EAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,4CAAoB,CAAC,UAAU,EAAE,CAAC,EAClG;IACN,CAAC;IAEM,uBAAuB,CAAC,QAA8B;QACzD,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAE9C,uBACI,OAAO,EAAE,IAAI,IACV,IAAA,yDAAsB,EAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,4CAAoB,CAAC,YAAY,EAAE,CAAC,EACpG;IACN,CAAC;IAEM,6BAA6B,CAAC,QAAsC;QACvE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAE9C,uBACI,OAAO,EAAE,IAAI,IACV,IAAA,iEAA8B,EAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,4CAAoB,CAAC,mBAAmB,EAAE,CAAC,EACnH;IACN,CAAC;IAEM,+BAA+B,CAAC,QAAsC;QACzE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAE9C,uBACI,OAAO,EAAE,IAAI,IACV,IAAA,iEAA8B,EAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,4CAAoB,CAAC,qBAAqB,EAAE,CAAC,EACrH;IACN,CAAC;IAEM,iBAAiB,CAAC,gBAA6C;QAClE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAE9C,OAAO;YACH,KAAK;YACL,SAAS;YACT,OAAO,EAAE,KAAK;YACd,IAAI,EAAE,4CAAoB,CAAC,MAAM;YACjC,MAAM,EAAE,gBAAgB,CAAC,MAAM;YAC/B,MAAM,EAAE,gBAAgB,CAAC,MAAM;SAClC,CAAC;IACN,CAAC;CACJ;AA/DD,8DA+DC","file":"UIKitInteractionResponder.js","sourcesContent":["import type { Omit } from '../../lib/utils';\nimport type { IUIKitErrorInteractionParam } from '../accessors/IUIController';\nimport type { IUIKitContextualBarResponse, IUIKitErrorResponse, IUIKitModalResponse, IUIKitResponse } from './IUIKitInteractionType';\nimport { UIKitInteractionType } from './IUIKitInteractionType';\nimport type { IUIKitSurface } from './IUIKitSurface';\nimport type { IUIKitBaseIncomingInteraction } from './UIKitIncomingInteractionTypes';\nimport { formatContextualBarInteraction, formatModalInteraction } from './UIKitInteractionPayloadFormatter';\n\nexport type IUIKitModalViewParam = Omit<IUIKitSurface, 'appId' | 'id' | 'type'> & Partial<Pick<IUIKitSurface, 'id'>>;\nexport type IUIKitContextualBarViewParam = Omit<IUIKitSurface, 'appId' | 'id' | 'type'> & Partial<Pick<IUIKitSurface, 'id'>>;\n\nexport class UIKitInteractionResponder {\n    constructor(private readonly baseContext: IUIKitBaseIncomingInteraction) {}\n\n    public successResponse(): IUIKitResponse {\n        return {\n            success: true,\n        };\n    }\n\n    public errorResponse(): IUIKitResponse {\n        return {\n            success: false,\n        };\n    }\n\n    public openModalViewResponse(viewData: IUIKitModalViewParam): IUIKitModalResponse {\n        const { appId, triggerId } = this.baseContext;\n\n        return {\n            success: true,\n            ...formatModalInteraction(viewData, { appId, triggerId, type: UIKitInteractionType.MODAL_OPEN }),\n        };\n    }\n\n    public updateModalViewResponse(viewData: IUIKitModalViewParam): IUIKitModalResponse {\n        const { appId, triggerId } = this.baseContext;\n\n        return {\n            success: true,\n            ...formatModalInteraction(viewData, { appId, triggerId, type: UIKitInteractionType.MODAL_UPDATE }),\n        };\n    }\n\n    public openContextualBarViewResponse(viewData: IUIKitContextualBarViewParam): IUIKitContextualBarResponse {\n        const { appId, triggerId } = this.baseContext;\n\n        return {\n            success: true,\n            ...formatContextualBarInteraction(viewData, { appId, triggerId, type: UIKitInteractionType.CONTEXTUAL_BAR_OPEN }),\n        };\n    }\n\n    public updateContextualBarViewResponse(viewData: IUIKitContextualBarViewParam): IUIKitContextualBarResponse {\n        const { appId, triggerId } = this.baseContext;\n\n        return {\n            success: true,\n            ...formatContextualBarInteraction(viewData, { appId, triggerId, type: UIKitInteractionType.CONTEXTUAL_BAR_UPDATE }),\n        };\n    }\n\n    public viewErrorResponse(errorInteraction: IUIKitErrorInteractionParam): IUIKitErrorResponse {\n        const { appId, triggerId } = this.baseContext;\n\n        return {\n            appId,\n            triggerId,\n            success: false,\n            type: UIKitInteractionType.ERRORS,\n            viewId: errorInteraction.viewId,\n            errors: errorInteraction.errors,\n        };\n    }\n}\n"]}