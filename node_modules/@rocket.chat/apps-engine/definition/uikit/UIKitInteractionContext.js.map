{"version":3,"sources":["src/definition/uikit/UIKitInteractionContext.ts"],"names":[],"mappings":";;;AAQA,2EAAwE;AAExE,MAAsB,uBAAuB;IAKzC,YAAY,WAA0C;QAClD,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,WAAW,CAAC;QAEzE,IAAI,CAAC,WAAW,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC;QAExE,IAAI,CAAC,SAAS,GAAG,IAAI,qDAAyB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACrE,CAAC;IAEM,uBAAuB;QAC1B,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;CAGJ;AAlBD,0DAkBC;AAED,MAAa,4BAA6B,SAAQ,uBAAuB;IACrE,YAA6B,eAA+C;QACxE,KAAK,CAAC,eAAe,CAAC,CAAC;QADE,oBAAe,GAAf,eAAe,CAAgC;IAE5E,CAAC;IAEM,kBAAkB;QACrB,OAAO,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;CACJ;AARD,oEAQC;AAED,MAAa,iCAAkC,SAAQ,uBAAuB;IAC1E,YAA6B,eAAoD;QAC7E,KAAK,CAAC,eAAe,CAAC,CAAC;QADE,oBAAe,GAAf,eAAe,CAAqC;IAEjF,CAAC;IAEM,kBAAkB;QACrB,OAAO,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;CACJ;AARD,8EAQC;AAED,MAAa,gCAAiC,SAAQ,uBAAuB;IACzE,YAA6B,eAAmD;QAC5E,KAAK,CAAC,eAAe,CAAC,CAAC;QADE,oBAAe,GAAf,eAAe,CAAoC;IAEhF,CAAC;IAEM,kBAAkB;QACrB,OAAO,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;CACJ;AARD,4EAQC;AAED,MAAa,mCAAoC,SAAQ,uBAAuB;IAC5E,YAA6B,eAAwG;QACjI,KAAK,CAAC,eAAe,CAAC,CAAC;QADE,oBAAe,GAAf,eAAe,CAAyF;IAErI,CAAC;IAEM,kBAAkB;QACrB,OAAO,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;CACJ;AARD,kFAQC","file":"UIKitInteractionContext.js","sourcesContent":["import type {\n    IUIKitActionButtonIncomingInteraction,\n    IUIKitActionButtonMessageBoxIncomingInteraction,\n    IUIKitBaseIncomingInteraction,\n    IUIKitBlockIncomingInteraction,\n    IUIKitViewCloseIncomingInteraction,\n    IUIKitViewSubmitIncomingInteraction,\n} from './UIKitIncomingInteractionTypes';\nimport { UIKitInteractionResponder } from './UIKitInteractionResponder';\n\nexport abstract class UIKitInteractionContext {\n    private baseContext: IUIKitBaseIncomingInteraction;\n\n    private responder: UIKitInteractionResponder;\n\n    constructor(baseContext: IUIKitBaseIncomingInteraction) {\n        const { appId, actionId, room, user, triggerId, threadId } = baseContext;\n\n        this.baseContext = { appId, actionId, room, user, triggerId, threadId };\n\n        this.responder = new UIKitInteractionResponder(this.baseContext);\n    }\n\n    public getInteractionResponder() {\n        return this.responder;\n    }\n\n    public abstract getInteractionData(): IUIKitBaseIncomingInteraction;\n}\n\nexport class UIKitBlockInteractionContext extends UIKitInteractionContext {\n    constructor(private readonly interactionData: IUIKitBlockIncomingInteraction) {\n        super(interactionData);\n    }\n\n    public getInteractionData(): IUIKitBlockIncomingInteraction {\n        return this.interactionData;\n    }\n}\n\nexport class UIKitViewSubmitInteractionContext extends UIKitInteractionContext {\n    constructor(private readonly interactionData: IUIKitViewSubmitIncomingInteraction) {\n        super(interactionData);\n    }\n\n    public getInteractionData(): IUIKitViewSubmitIncomingInteraction {\n        return this.interactionData;\n    }\n}\n\nexport class UIKitViewCloseInteractionContext extends UIKitInteractionContext {\n    constructor(private readonly interactionData: IUIKitViewCloseIncomingInteraction) {\n        super(interactionData);\n    }\n\n    public getInteractionData(): IUIKitViewCloseIncomingInteraction {\n        return this.interactionData;\n    }\n}\n\nexport class UIKitActionButtonInteractionContext extends UIKitInteractionContext {\n    constructor(private readonly interactionData: IUIKitActionButtonIncomingInteraction | IUIKitActionButtonMessageBoxIncomingInteraction) {\n        super(interactionData);\n    }\n\n    public getInteractionData(): IUIKitActionButtonIncomingInteraction {\n        return this.interactionData;\n    }\n}\n"]}