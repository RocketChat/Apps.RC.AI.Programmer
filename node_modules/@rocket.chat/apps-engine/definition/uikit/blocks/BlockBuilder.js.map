{"version":3,"sources":["src/definition/uikit/blocks/BlockBuilder.ts"],"names":[],"mappings":"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","file":"BlockBuilder.js","sourcesContent":["import { v1 as uuid } from 'uuid';\n\nimport type { Omit } from '../../../lib/utils';\nimport type { IActionsBlock, IBlock, IConditionalBlock, IConditionalBlockFilters, IContextBlock, IImageBlock, IInputBlock, ISectionBlock } from './Blocks';\nimport { BlockType } from './Blocks';\nimport type {\n    IBlockElement,\n    IButtonElement,\n    IImageElement,\n    IInputElement,\n    IInteractiveElement,\n    IMultiStaticSelectElement,\n    IOverflowMenuElement,\n    IPlainTextInputElement,\n    ISelectElement,\n    IStaticSelectElement,\n} from './Elements';\nimport { BlockElementType } from './Elements';\nimport type { ITextObject } from './Objects';\nimport { TextObjectType } from './Objects';\n\ntype BlockFunctionParameter<T extends IBlock> = Omit<T, 'type'>;\ntype ElementFunctionParameter<T extends IBlockElement> = T extends IInteractiveElement\n    ? Omit<T, 'type' | 'actionId'> | Partial<Pick<T, 'actionId'>>\n    : Omit<T, 'type'>;\n\ntype SectionBlockParam = BlockFunctionParameter<ISectionBlock>;\ntype ImageBlockParam = BlockFunctionParameter<IImageBlock>;\ntype ActionsBlockParam = BlockFunctionParameter<IActionsBlock>;\ntype ContextBlockParam = BlockFunctionParameter<IContextBlock>;\ntype InputBlockParam = BlockFunctionParameter<IInputBlock>;\n\ntype ButtonElementParam = ElementFunctionParameter<IButtonElement>;\ntype ImageElementParam = ElementFunctionParameter<IImageElement>;\ntype OverflowMenuElementParam = ElementFunctionParameter<IOverflowMenuElement>;\ntype PlainTextInputElementParam = ElementFunctionParameter<IPlainTextInputElement>;\ntype StaticSelectElementParam = ElementFunctionParameter<IStaticSelectElement>;\ntype MultiStaticSelectElementParam = ElementFunctionParameter<IMultiStaticSelectElement>;\n\n/**\n * @deprecated please prefer the rocket.chat/ui-kit components\n */\nexport class BlockBuilder {\n    private readonly blocks: Array<IBlock>;\n\n    constructor(private readonly appId: string) {\n        this.blocks = [];\n    }\n\n    public addSectionBlock(block: SectionBlockParam): BlockBuilder {\n        this.addBlock({ type: BlockType.SECTION, ...block } as ISectionBlock);\n\n        return this;\n    }\n\n    public addImageBlock(block: ImageBlockParam): BlockBuilder {\n        this.addBlock({ type: BlockType.IMAGE, ...block } as IImageBlock);\n\n        return this;\n    }\n\n    public addDividerBlock(): BlockBuilder {\n        this.addBlock({ type: BlockType.DIVIDER });\n\n        return this;\n    }\n\n    public addActionsBlock(block: ActionsBlockParam): BlockBuilder {\n        this.addBlock({ type: BlockType.ACTIONS, ...block } as IActionsBlock);\n\n        return this;\n    }\n\n    public addContextBlock(block: ContextBlockParam): BlockBuilder {\n        this.addBlock({ type: BlockType.CONTEXT, ...block } as IContextBlock);\n\n        return this;\n    }\n\n    public addInputBlock(block: InputBlockParam): BlockBuilder {\n        this.addBlock({ type: BlockType.INPUT, ...block } as IInputBlock);\n\n        return this;\n    }\n\n    public addConditionalBlock(innerBlocks: BlockBuilder | Array<IBlock>, condition?: IConditionalBlockFilters): BlockBuilder {\n        const render = innerBlocks instanceof BlockBuilder ? innerBlocks.getBlocks() : innerBlocks;\n\n        this.addBlock({ type: BlockType.CONDITIONAL, render, when: condition } as IConditionalBlock);\n\n        return this;\n    }\n\n    public getBlocks() {\n        return this.blocks;\n    }\n\n    public newPlainTextObject(text: string, emoji = false): ITextObject {\n        return {\n            type: TextObjectType.PLAINTEXT,\n            text,\n            emoji,\n        };\n    }\n\n    public newMarkdownTextObject(text: string): ITextObject {\n        return {\n            type: TextObjectType.MARKDOWN,\n            text,\n        };\n    }\n\n    public newButtonElement(info: ButtonElementParam): IButtonElement {\n        return this.newInteractiveElement({\n            type: BlockElementType.BUTTON,\n            ...info,\n        } as IButtonElement);\n    }\n\n    public newImageElement(info: ImageElementParam): IImageElement {\n        return {\n            type: BlockElementType.IMAGE,\n            ...info,\n        };\n    }\n\n    public newOverflowMenuElement(info: OverflowMenuElementParam): IOverflowMenuElement {\n        return this.newInteractiveElement({\n            type: BlockElementType.OVERFLOW_MENU,\n            ...info,\n        } as IOverflowMenuElement);\n    }\n\n    public newPlainTextInputElement(info: PlainTextInputElementParam): IPlainTextInputElement {\n        return this.newInputElement({\n            type: BlockElementType.PLAIN_TEXT_INPUT,\n            ...info,\n        } as IPlainTextInputElement);\n    }\n\n    public newStaticSelectElement(info: StaticSelectElementParam): IStaticSelectElement {\n        return this.newSelectElement({\n            type: BlockElementType.STATIC_SELECT,\n            ...info,\n        } as IStaticSelectElement);\n    }\n\n    public newMultiStaticElement(info: MultiStaticSelectElementParam): IMultiStaticSelectElement {\n        return this.newSelectElement({\n            type: BlockElementType.MULTI_STATIC_SELECT,\n            ...info,\n        } as IMultiStaticSelectElement);\n    }\n\n    private newInteractiveElement<T extends IInteractiveElement>(element: T): T {\n        if (!element.actionId) {\n            element.actionId = this.generateActionId();\n        }\n\n        return element;\n    }\n\n    private newInputElement<T extends IInputElement>(element: T): T {\n        if (!element.actionId) {\n            element.actionId = this.generateActionId();\n        }\n\n        return element;\n    }\n\n    private newSelectElement<T extends ISelectElement>(element: T): T {\n        if (!element.actionId) {\n            element.actionId = this.generateActionId();\n        }\n\n        return element;\n    }\n\n    private addBlock(block: IBlock): void {\n        if (!block.blockId) {\n            block.blockId = this.generateBlockId();\n        }\n\n        block.appId = this.appId;\n\n        this.blocks.push(block);\n    }\n\n    private generateBlockId(): string {\n        return uuid();\n    }\n\n    private generateActionId(): string {\n        return uuid();\n    }\n}\n"]}