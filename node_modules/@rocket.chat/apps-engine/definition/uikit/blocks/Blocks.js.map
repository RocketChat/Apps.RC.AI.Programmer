{"version":3,"sources":["src/definition/uikit/blocks/Blocks.ts"],"names":[],"mappings":";;;AAGA,IAAY,SAQX;AARD,WAAY,SAAS;IACjB,gCAAmB,CAAA;IACnB,gCAAmB,CAAA;IACnB,4BAAe,CAAA;IACf,gCAAmB,CAAA;IACnB,gCAAmB,CAAA;IACnB,4BAAe,CAAA;IACf,wCAA2B,CAAA;AAC/B,CAAC,EARW,SAAS,yBAAT,SAAS,QAQpB;AA+DD,IAAY,6BAGX;AAHD,WAAY,6BAA6B;IACrC,2DAA0B,CAAA;IAC1B,sDAAqB,CAAA;AACzB,CAAC,EAHW,6BAA6B,6CAA7B,6BAA6B,QAGxC","file":"Blocks.js","sourcesContent":["import type { AccessoryElements, IBlockElement, IImageElement, IInputElement } from './Elements';\nimport type { ITextObject } from './Objects';\n\nexport enum BlockType {\n    SECTION = 'section',\n    DIVIDER = 'divider',\n    IMAGE = 'image',\n    ACTIONS = 'actions',\n    CONTEXT = 'context',\n    INPUT = 'input',\n    CONDITIONAL = 'conditional',\n}\n\n/**\n * @deprecated please prefer the rocket.chat/ui-kit components\n */\nexport interface IBlock {\n    type: BlockType;\n    appId?: string;\n    blockId?: string;\n}\n\n/**\n * @deprecated please prefer the rocket.chat/ui-kit components\n */\nexport interface ISectionBlock extends IBlock {\n    type: BlockType.SECTION;\n    text: ITextObject;\n    accessory?: AccessoryElements;\n}\n\n/**\n * @deprecated please prefer the rocket.chat/ui-kit components\n */\nexport interface IImageBlock extends IBlock {\n    type: BlockType.IMAGE;\n    imageUrl: string;\n    altText: string;\n    title?: ITextObject;\n}\n\n/**\n * @deprecated please prefer the rocket.chat/ui-kit components\n */\nexport interface IDividerBlock extends IBlock {\n    type: BlockType.DIVIDER;\n}\n\n/**\n * @deprecated please prefer the rocket.chat/ui-kit components\n */\nexport interface IActionsBlock extends IBlock {\n    type: BlockType.ACTIONS;\n    elements: Array<IBlockElement>;\n}\n\n/**\n * @deprecated please prefer the rocket.chat/ui-kit components\n */\nexport interface IContextBlock extends IBlock {\n    type: BlockType.CONTEXT;\n    elements: Array<ITextObject | IImageElement>;\n}\n\n/**\n * @deprecated please prefer the rocket.chat/ui-kit components\n */\nexport interface IInputBlock extends IBlock {\n    type: BlockType.INPUT;\n    element: IInputElement;\n    label: ITextObject;\n    optional?: boolean;\n}\n\nexport enum ConditionalBlockFiltersEngine {\n    ROCKETCHAT = 'rocket.chat',\n    LIVECHAT = 'livechat',\n}\n\nexport interface IConditionalBlockFilters {\n    engine?: Array<ConditionalBlockFiltersEngine>;\n}\n\n/**\n * @deprecated please prefer the rocket.chat/ui-kit components\n *\n * Declares a block that is only visible when a certain\n * condition is met.\n *\n * The content specified in the `render` property will be\n * shown.\n *\n * No condition will be checked by default, i.e. the block\n * will be shown in every case like other blocks.\n *\n * Currently supported conditions:\n *      `engine: Array<\"rocket.chat\" | \"omnichannel\">` specifies what engine should\n *      render the block:\n *          \"rocket.chat\" for regular Rocket.Chat engine\n *          \"omnichannel\" for the Livechat/Omnichannel widget engine\n *      leave it blank to show the block in both engines\n */\n\nexport interface IConditionalBlock extends IBlock {\n    type: BlockType.CONDITIONAL;\n    when?: IConditionalBlockFilters;\n    render: Array<IBlock>;\n}\n"]}