{"version":3,"sources":["src/definition/messages/IPostMessageDeleted.ts"],"names":[],"mappings":"","file":"IPostMessageDeleted.js","sourcesContent":["import type { IMessage } from '.';\nimport type { IHttp, IModify, IPersistence, IRead } from '../accessors';\nimport type { IMessageDeleteContext } from './IMessageDeleteContext';\n\n/** Handler for after a message is deleted. */\nexport interface IPostMessageDeleted {\n    /**\n     * Enables the handler to signal to the Apps framework whether\n     * this handler should actually be executed for after the message\n     * has been deleted.\n     *\n     * @param message The deleted message\n     * @param read An accessor to the environment\n     * @param http An accessor to the outside world\n     * @param context The context of the message which was deleted\n     * @returns whether to run the executor function\n     */\n    checkPostMessageDeleted?(message: IMessage, read: IRead, http: IHttp, context: IMessageDeleteContext): Promise<boolean>;\n\n    /**\n     * Method called *after* the message has been deleted.\n     *\n     * @param message The deleted message\n     * @param read An accessor to the environment\n     * @param http An accessor to the outside world\n     * @param persistence An accessor to the App's persistence\n     * @param context The context of the message which was deleted\n     */\n    executePostMessageDeleted(\n        message: IMessage,\n        read: IRead,\n        http: IHttp,\n        persistence: IPersistence,\n        modify: IModify,\n        context: IMessageDeleteContext,\n    ): Promise<void>;\n}\n"]}