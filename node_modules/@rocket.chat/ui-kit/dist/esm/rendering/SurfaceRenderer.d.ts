import type { Block } from '../blocks/Block';
import type { BlockElement } from '../blocks/BlockElement';
import type { RenderableLayoutBlock } from '../blocks/RenderableLayoutBlock';
import type { TextObject } from '../blocks/TextObject';
import type { ActionsBlock } from '../blocks/layout/ActionsBlock';
import type { ContextBlock } from '../blocks/layout/ContextBlock';
import type { InputBlock } from '../blocks/layout/InputBlock';
import type { SectionBlock } from '../blocks/layout/SectionBlock';
import type { Markdown } from '../blocks/text/Markdown';
import type { PlainText } from '../blocks/text/PlainText';
import { BlockContext } from './BlockContext';
import type { BlockRenderers } from './BlockRenderers';
import type { Conditions } from './Conditions';
export declare abstract class SurfaceRenderer<TOutputObject, TAllowedLayoutBlock extends RenderableLayoutBlock = RenderableLayoutBlock> implements BlockRenderers<TOutputObject> {
    protected readonly allowedLayoutBlockTypes: Set<TAllowedLayoutBlock['type']>;
    constructor(allowedLayoutBlockTypes: TAllowedLayoutBlock['type'][]);
    private isAllowedLayoutBlock;
    render(blocks: readonly Block[], conditions?: Conditions): TOutputObject[];
    renderTextObject(textObject: TextObject, index: number, context: BlockContext): TOutputObject | null;
    renderActionsBlockElement(block: BlockElement, index: number): TOutputObject | null;
    /** @deprecated */
    renderActions(element: ActionsBlock['elements'][number], _context: BlockContext, _: undefined, index: number): TOutputObject | null;
    renderContextBlockElement(block: TextObject | BlockElement, index: number): TOutputObject | null;
    /** @deprecated */
    renderContext(element: ContextBlock['elements'][number], _context: BlockContext, _: undefined, index: number): TOutputObject | null;
    renderInputBlockElement(block: BlockElement, index: number): TOutputObject | null;
    /** @deprecated */
    renderInputs(element: InputBlock['element'], _context: BlockContext, _: undefined, index: number): TOutputObject | null;
    renderSectionAccessoryBlockElement(block: BlockElement, index: number): TOutputObject | null;
    /** @deprecated */
    renderAccessories(element: Exclude<SectionBlock['accessory'], undefined>, _context: BlockContext, _: undefined, index: number): TOutputObject | null;
    /** @deprecated */
    plainText(element: PlainText, context?: BlockContext, index?: number): TOutputObject | null;
    /** @deprecated */
    text(textObject: TextObject, context?: BlockContext, index?: number): TOutputObject | null;
    abstract plain_text(textObject: PlainText, context: BlockContext, index: number): TOutputObject | null;
    abstract mrkdwn(textObject: Markdown, context: BlockContext, index: number): TOutputObject | null;
}
//# sourceMappingURL=SurfaceRenderer.d.ts.map